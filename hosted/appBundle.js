/*! For license information please see appBundle.js.LICENSE.txt */
(()=>{var e={300:e=>{const t=e=>{document.getElementById("errorMessage").textContent=e,document.getElementById("statusMessage").classList.remove("hidden")};e.exports={handleError:t,sendPost:async(e,n,r)=>{const l=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});let a;try{const e=l.headers.get("content-type");if(!e||!e.includes("application/json")){const e=await l.text();return console.error("Non-JSON response:",e),void t("Unexpected response from server")}a=await l.json()}catch(e){return console.error("Failed to parse JSON:",e),void t("Something went wrong while processing the response")}document.getElementById("statusMessage").classList.add("hidden"),a.redirect&&(window.location=a.redirect),a.error&&t(a.error),r&&r(a)},hideError:()=>{document.getElementById("statusMessage").classList.add("hidden")},sendDelete:async(e,n,r)=>{const l=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}),a=await l.json();a.error&&t(a.error),r&&r(a)}}},247:(e,t,n)=>{"use strict";var r=n(982),l=n(540),a=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function u(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function s(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function c(e){if(u(e)!==e)throw Error(o(188))}function f(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=f(e)))return t;e=e.sibling}return null}var d=Object.assign,p=Symbol.for("react.element"),m=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),g=Symbol.for("react.fragment"),y=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),b=Symbol.for("react.provider"),k=Symbol.for("react.consumer"),w=Symbol.for("react.context"),S=Symbol.for("react.forward_ref"),E=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),x=Symbol.for("react.memo"),_=Symbol.for("react.lazy");Symbol.for("react.scope");var P=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var z=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var N=Symbol.iterator;function T(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var L=Symbol.for("react.client.reference");function O(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===L?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case g:return"Fragment";case v:return"Profiler";case y:return"StrictMode";case E:return"Suspense";case C:return"SuspenseList";case P:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case w:return(e.displayName||"Context")+".Provider";case k:return(e._context.displayName||"Context")+".Consumer";case S:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case x:return null!==(t=e.displayName||null)?t:O(e.type)||"Memo";case _:t=e._payload,e=e._init;try{return O(e(t))}catch(e){}}return null}var R=Array.isArray,D=l.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,F=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,M={pending:!1,data:null,method:null,action:null},A=[],I=-1;function U(e){return{current:e}}function j(e){0>I||(e.current=A[I],A[I]=null,I--)}function H(e,t){I++,A[I]=e.current,e.current=t}var $=U(null),V=U(null),B=U(null),q=U(null);function Q(e,t){switch(H(B,t),H(V,e),H($,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?lf(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=af(t=lf(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}j($),H($,e)}function W(){j($),j(V),j(B)}function K(e){null!==e.memoizedState&&H(q,e);var t=$.current,n=af(t,e.type);t!==n&&(H(V,e),H($,n))}function Y(e){V.current===e&&(j($),j(V)),q.current===e&&(j(q),Yf._currentValue=M)}var G=Object.prototype.hasOwnProperty,X=r.unstable_scheduleCallback,J=r.unstable_cancelCallback,Z=r.unstable_shouldYield,ee=r.unstable_requestPaint,te=r.unstable_now,ne=r.unstable_getCurrentPriorityLevel,re=r.unstable_ImmediatePriority,le=r.unstable_UserBlockingPriority,ae=r.unstable_NormalPriority,oe=r.unstable_LowPriority,ie=r.unstable_IdlePriority,ue=r.log,se=r.unstable_setDisableYieldValue,ce=null,fe=null;function de(e){if("function"==typeof ue&&se(e),fe&&"function"==typeof fe.setStrictMode)try{fe.setStrictMode(ce,e)}catch(e){}}var pe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(me(e)/he|0)|0},me=Math.log,he=Math.LN2,ge=256,ye=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function be(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var l=0,a=e.suspendedLanes,o=e.pingedLanes;e=e.warmLanes;var i=134217727&r;return 0!==i?0!=(r=i&~a)?l=ve(r):0!=(o&=i)?l=ve(o):n||0!=(n=i&~e)&&(l=ve(n)):0!=(i=r&~a)?l=ve(i):0!==o?l=ve(o):n||0!=(n=r&~e)&&(l=ve(n)),0===l?0:0===t||t===l||t&a||!((a=l&-l)>=(n=t&-t)||32===a&&4194048&n)?l:t}function ke(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function we(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Se(){var e=ge;return!(4194048&(ge<<=1))&&(ge=256),e}function Ee(){var e=ye;return!(62914560&(ye<<=1))&&(ye=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function xe(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function _e(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-pe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function Pe(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-pe(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}function ze(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Ne(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Te(){var e=F.p;return 0!==e?e:void 0===(e=window.event)?32:cd(e.type)}var Le=Math.random().toString(36).slice(2),Oe="__reactFiber$"+Le,Re="__reactProps$"+Le,De="__reactContainer$"+Le,Fe="__reactEvents$"+Le,Me="__reactListeners$"+Le,Ae="__reactHandles$"+Le,Ie="__reactResources$"+Le,Ue="__reactMarker$"+Le;function je(e){delete e[Oe],delete e[Re],delete e[Fe],delete e[Me],delete e[Ae]}function He(e){var t=e[Oe];if(t)return t;for(var n=e.parentNode;n;){if(t=n[De]||n[Oe]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kf(e);null!==e;){if(n=e[Oe])return n;e=kf(e)}return t}n=(e=n).parentNode}return null}function $e(e){if(e=e[Oe]||e[De]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ve(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Be(e){var t=e[Ie];return t||(t=e[Ie]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function qe(e){e[Ue]=!0}var Qe=new Set,We={};function Ke(e,t){Ye(e,t),Ye(e+"Capture",t)}function Ye(e,t){for(We[e]=t,e=0;e<t.length;e++)Qe.add(t[e])}var Ge,Xe,Je=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Ze={},et={};function tt(e,t,n){if(l=t,G.call(et,l)||!G.call(Ze,l)&&(Je.test(l)?et[l]=!0:(Ze[l]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var l}function nt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function rt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function lt(e){if(void 0===Ge)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Ge=t&&t[1]||"",Xe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Ge+e+Xe}var at=!1;function ot(e,t){if(!e||at)return"";at=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),o=a[0],i=a[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(l=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;l<s.length&&!s[l].includes("DetermineComponentFrameRoot");)l++;if(r===u.length||l===s.length)for(r=u.length-1,l=s.length-1;1<=r&&0<=l&&u[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(u[r]!==s[l]){if(1!==r||1!==l)do{if(r--,0>--l||u[r]!==s[l]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=l);break}}}finally{at=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?lt(n):""}function it(e){switch(e.tag){case 26:case 27:case 5:return lt(e.type);case 16:return lt("Lazy");case 13:return lt("Suspense");case 19:return lt("SuspenseList");case 0:case 15:return ot(e.type,!1);case 11:return ot(e.type.render,!1);case 1:return ot(e.type,!0);case 31:return lt("Activity");default:return""}}function ut(e){try{var t="";do{t+=it(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,l,a,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?vt(e,o,st(t)):null!=n?vt(e,o,st(n)):null!=r&&e.removeAttribute("value"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&"function"!=typeof l&&"symbol"!=typeof l),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+st(i):e.removeAttribute("name")}function yt(e,t,n,r,l,a,o,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:l)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function vt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,l=0;l<e.length;l++){if(e[l].value===n)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function kt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(R(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Et=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Et.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function xt(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var l in t)r=t[l],t.hasOwnProperty(l)&&n[l]!==r&&Ct(e,l,r)}else for(var a in t)t.hasOwnProperty(a)&&Ct(e,a,t[a])}function _t(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Pt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),zt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Nt(e){return zt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Tt=null;function Lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ot=null,Rt=null;function Dt(e){var t=$e(e);if(t&&(e=t.stateNode)){var n=e[Re]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=r[Re]||null;if(!l)throw Error(o(90));gt(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":kt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Ft=!1;function Mt(e,t,n){if(Ft)return e(t,n);Ft=!0;try{return e(t)}finally{if(Ft=!1,(null!==Ot||null!==Rt)&&(Hs(),Ot&&(t=Ot,e=Rt,Rt=Ot=null,Dt(t),e)))for(t=0;t<e.length;t++)Dt(e[t])}}function At(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Re]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var It=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ut=!1;if(It)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){Ut=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(e){Ut=!1}var Ht=null,$t=null,Vt=null;function Bt(){if(Vt)return Vt;var e,t,n=$t,r=n.length,l="value"in Ht?Ht.value:Ht.textContent,a=l.length;for(e=0;e<r&&n[e]===l[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===l[a-t];t++);return Vt=l.slice(e,1<t?1-t:void 0)}function qt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Qt(){return!0}function Wt(){return!1}function Kt(e){function t(t,n,r,l,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?Qt:Wt,this.isPropagationStopped=Wt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Qt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Qt)},persist:function(){},isPersistent:Qt}),t}var Yt,Gt,Xt,Jt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Kt(Jt),en=d({},Jt,{view:0,detail:0}),tn=Kt(en),nn=d({},en,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Yt=e.screenX-Xt.screenX,Gt=e.screenY-Xt.screenY):Gt=Yt=0,Xt=e),Yt)},movementY:function(e){return"movementY"in e?e.movementY:Gt}}),rn=Kt(nn),ln=Kt(d({},nn,{dataTransfer:0})),an=Kt(d({},en,{relatedTarget:0})),on=Kt(d({},Jt,{animationName:0,elapsedTime:0,pseudoElement:0})),un=Kt(d({},Jt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),sn=Kt(d({},Jt,{data:0})),cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function pn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function mn(){return pn}var hn=Kt(d({},en,{key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=qt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:mn,charCode:function(e){return"keypress"===e.type?qt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?qt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),gn=Kt(d({},nn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),yn=Kt(d({},en,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:mn})),vn=Kt(d({},Jt,{propertyName:0,elapsedTime:0,pseudoElement:0})),bn=Kt(d({},nn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),kn=Kt(d({},Jt,{newState:0,oldState:0})),wn=[9,13,27,32],Sn=It&&"CompositionEvent"in window,En=null;It&&"documentMode"in document&&(En=document.documentMode);var Cn=It&&"TextEvent"in window&&!En,xn=It&&(!Sn||En&&8<En&&11>=En),_n=String.fromCharCode(32),Pn=!1;function zn(e,t){switch(e){case"keyup":return-1!==wn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Nn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Tn=!1,Ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function On(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ln[e.type]:"textarea"===t}function Rn(e,t,n,r){Ot?Rt?Rt.push(r):Rt=[r]:Ot=r,0<(t=Bc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Dn=null,Fn=null;function Mn(e){Mc(e,0)}function An(e){if(dt(Ve(e)))return e}function In(e,t){if("change"===e)return t}var Un=!1;if(It){var jn;if(It){var Hn="oninput"in document;if(!Hn){var $n=document.createElement("div");$n.setAttribute("oninput","return;"),Hn="function"==typeof $n.oninput}jn=Hn}else jn=!1;Un=jn&&(!document.documentMode||9<document.documentMode)}function Vn(){Dn&&(Dn.detachEvent("onpropertychange",Bn),Fn=Dn=null)}function Bn(e){if("value"===e.propertyName&&An(Fn)){var t=[];Rn(t,Fn,e,Lt(e)),Mt(Mn,t)}}function qn(e,t,n){"focusin"===e?(Vn(),Fn=n,(Dn=t).attachEvent("onpropertychange",Bn)):"focusout"===e&&Vn()}function Qn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return An(Fn)}function Wn(e,t){if("click"===e)return An(t)}function Kn(e,t){if("input"===e||"change"===e)return An(t)}var Yn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Gn(e,t){if(Yn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!G.call(t,l)||!Yn(e[l],t[l]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Jn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function er(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function tr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nr=It&&"documentMode"in document&&11>=document.documentMode,rr=null,lr=null,ar=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&tr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Gn(ar,r)||(ar=r,0<(r=Bc(lr,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function ur(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}It&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),mr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),yr=dr("transitionstart"),vr=dr("transitioncancel"),br=dr("transitionend"),kr=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Sr(e,t){kr.set(e,t),Ke(t,[e])}wr.push("scrollEnd");var Er=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=Er.get(e);return void 0!==n?n:(t={value:e,source:t,stack:ut(t)},Er.set(e,t),t)}return{value:e,source:t,stack:ut(t)}}var xr=[],_r=0,Pr=0;function zr(){for(var e=_r,t=Pr=_r=0;t<e;){var n=xr[t];xr[t++]=null;var r=xr[t];xr[t++]=null;var l=xr[t];xr[t++]=null;var a=xr[t];if(xr[t++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&Or(n,l,a)}}function Nr(e,t,n,r){xr[_r++]=e,xr[_r++]=t,xr[_r++]=n,xr[_r++]=r,Pr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Tr(e,t,n,r){return Nr(e,t,n,r),Rr(e)}function Lr(e,t){return Nr(e,null,null,t),Rr(e)}function Or(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var l=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,l&&null!==t&&(l=31-pe(n),null===(r=(e=a.hiddenUpdates)[l])?e[l]=[t]:r.push(t),t.lane=536870912|n),a):null}function Rr(e){if(50<Os)throw Os=0,Rs=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Dr={};function Fr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Mr(e,t,n,r){return new Fr(e,t,n,r)}function Ar(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ir(e,t){var n=e.alternate;return null===n?((n=Mr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ur(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function jr(e,t,n,r,l,a){var i=0;if(r=e,"function"==typeof e)Ar(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,$.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case P:return(e=Mr(31,n,t,l)).elementType=P,e.lanes=a,e;case g:return Hr(n.children,l,a,t);case y:i=8,l|=24;break;case v:return(e=Mr(12,n,t,2|l)).elementType=v,e.lanes=a,e;case E:return(e=Mr(13,n,t,l)).elementType=E,e.lanes=a,e;case C:return(e=Mr(19,n,t,l)).elementType=C,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case b:case w:i=10;break e;case k:i=9;break e;case S:i=11;break e;case x:i=14;break e;case _:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Mr(i,n,t,l)).elementType=e,t.type=r,t.lanes=a,t}function Hr(e,t,n,r){return(e=Mr(7,e,r,t)).lanes=n,e}function $r(e,t,n){return(e=Mr(6,e,null,t)).lanes=n,e}function Vr(e,t,n){return(t=Mr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Br=[],qr=0,Qr=null,Wr=0,Kr=[],Yr=0,Gr=null,Xr=1,Jr="";function Zr(e,t){Br[qr++]=Wr,Br[qr++]=Qr,Qr=e,Wr=t}function el(e,t,n){Kr[Yr++]=Xr,Kr[Yr++]=Jr,Kr[Yr++]=Gr,Gr=e;var r=Xr;e=Jr;var l=32-pe(r)-1;r&=~(1<<l),n+=1;var a=32-pe(t)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,Xr=1<<32-pe(t)+l|n<<l|r,Jr=a+e}else Xr=1<<a|n<<l|r,Jr=e}function tl(e){null!==e.return&&(Zr(e,1),el(e,1,0))}function nl(e){for(;e===Qr;)Qr=Br[--qr],Br[qr]=null,Wr=Br[--qr],Br[qr]=null;for(;e===Gr;)Gr=Kr[--Yr],Kr[Yr]=null,Jr=Kr[--Yr],Kr[Yr]=null,Xr=Kr[--Yr],Kr[Yr]=null}var rl=null,ll=null,al=!1,ol=null,il=!1,ul=Error(o(519));function sl(e){throw hl(Cr(Error(o(418,"")),e)),ul}function cl(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Oe]=e,t[Re]=r,n){case"dialog":Ac("cancel",t),Ac("close",t);break;case"iframe":case"object":case"embed":Ac("load",t);break;case"video":case"audio":for(n=0;n<Dc.length;n++)Ac(Dc[n],t);break;case"source":Ac("error",t);break;case"img":case"image":case"link":Ac("error",t),Ac("load",t);break;case"details":Ac("toggle",t);break;case"input":Ac("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":Ac("invalid",t);break;case"textarea":Ac("invalid",t),wt(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Gc(t.textContent,n)?(null!=r.popover&&(Ac("beforetoggle",t),Ac("toggle",t)),null!=r.onScroll&&Ac("scroll",t),null!=r.onScrollEnd&&Ac("scrollend",t),null!=r.onClick&&(t.onclick=Xc),t=!0):t=!1,t||sl(e)}function fl(e){for(rl=e.return;rl;)switch(rl.tag){case 5:case 13:return void(il=!1);case 27:case 3:return void(il=!0);default:rl=rl.return}}function dl(e){if(e!==rl)return!1;if(!al)return fl(e),al=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||of(e.type,e.memoizedProps)),t=!t),t&&ll&&sl(e),fl(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){ll=vf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}ll=null}}else 27===n?(n=ll,mf(e.type)?(e=bf,bf=null,ll=e):ll=n):ll=rl?vf(e.stateNode.nextSibling):null;return!0}function pl(){ll=rl=null,al=!1}function ml(){var e=ol;return null!==e&&(null===bs?bs=e:bs.push.apply(bs,e),ol=null),e}function hl(e){null===ol?ol=[e]:ol.push(e)}var gl=U(null),yl=null,vl=null;function bl(e,t,n){H(gl,t._currentValue),t._currentValue=n}function kl(e){e._currentValue=gl.current,j(gl)}function wl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sl(e,t,n,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var i=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<t.length;s++)if(u.context===t[s]){a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),wl(a.return,n,e),r||(i=null);break e}a=u.next}}else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(a=i.alternate)&&(a.lanes|=n),wl(i,n,e),i=null}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===e){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}}function El(e,t,n,r){e=null;for(var l=t,a=!1;null!==l;){if(!a)if(524288&l.flags)a=!0;else if(262144&l.flags)break;if(10===l.tag){var i=l.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=l.type;Yn(l.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(l===q.current){if(null===(i=l.alternate))throw Error(o(387));i.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(Yf):e=[Yf])}l=l.return}null!==e&&Sl(t,e,n,r),t.flags|=262144}function Cl(e){for(e=e.firstContext;null!==e;){if(!Yn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function xl(e){yl=e,vl=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function _l(e){return zl(yl,e)}function Pl(e,t){return null===yl&&xl(e),zl(e,t)}function zl(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===vl){if(null===e)throw Error(o(308));vl=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else vl=vl.next=t;return n}var Nl="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Tl=r.unstable_scheduleCallback,Ll=r.unstable_NormalPriority,Ol={$$typeof:w,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Rl(){return{controller:new Nl,data:new Map,refCount:0}}function Dl(e){e.refCount--,0===e.refCount&&Tl(Ll,(function(){e.controller.abort()}))}var Fl=null,Ml=0,Al=0,Il=null;function Ul(){if(0==--Ml&&null!==Fl){null!==Il&&(Il.status="fulfilled");var e=Fl;Fl=null,Al=0,Il=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var jl=D.S;D.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Fl){var n=Fl=[];Ml=0,Al=Nc(),Il={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ml++,t.then(Ul,Ul)}(0,t),null!==jl&&jl(e,t)};var Hl=U(null);function $l(){var e=Hl.current;return null!==e?e:rs.pooledCache}function Vl(e,t){H(Hl,null===t?Hl.current:t.pool)}function Bl(){var e=$l();return null===e?null:{parent:Ol._currentValue,pool:e}}var ql=Error(o(460)),Ql=Error(o(474)),Wl=Error(o(542)),Kl={then:function(){}};function Yl(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Gl(){}function Xl(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Gl,Gl),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw ea(e=t.reason),e;default:if("string"==typeof t.status)t.then(Gl,Gl);else{if(null!==(e=rs)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw ea(e=t.reason),e}throw Jl=t,ql}}var Jl=null;function Zl(){if(null===Jl)throw Error(o(459));var e=Jl;return Jl=null,e}function ea(e){if(e===ql||e===Wl)throw Error(o(483))}var ta=!1;function na(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function ra(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function la(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function aa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&ns){var l=r.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),r.pending=t,t=Rr(e),Or(e,null,n),t}return Nr(e,r,t,n),Rr(e)}function oa(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Pe(e,n)}}function ia(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var l=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?l=a=t:a=a.next=t}else l=a=t;return n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var ua=!1;function sa(){if(ua&&null!==Il)throw Il}function ca(e,t,n,r){ua=!1;var l=e.updateQueue;ta=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?a=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=l.baseState;for(o=0,c=s=u=null,i=a;;){var p=-536870913&i.lane,m=p!==i.lane;if(m?(as&p)===p:(r&p)===p){0!==p&&p===Al&&(ua=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;p=t;var y=n;switch(g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(y,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=g.payload)?h.call(y,f,p):h))break e;f=d({},f,p);break e;case 2:ta=!0}}null!==(p=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=l.callbacks)?l.callbacks=[p]:m.push(p))}else m={lane:p,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=f):c=c.next=m,o|=p;if(null===(i=i.next)){if(null===(i=l.shared.pending))break;i=(m=i).next,m.next=null,l.lastBaseUpdate=m,l.shared.pending=null}}null===c&&(u=f),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),ps|=o,e.lanes=o,e.memoizedState=f}}function fa(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function da(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)fa(n[e],t)}var pa=U(null),ma=U(0);function ha(e,t){H(ma,e=fs),H(pa,t),fs=e|t.baseLanes}function ga(){H(ma,fs),H(pa,pa.current)}function ya(){fs=ma.current,j(pa),j(ma)}var va=0,ba=null,ka=null,wa=null,Sa=!1,Ea=!1,Ca=!1,xa=0,_a=0,Pa=null,za=0;function Na(){throw Error(o(321))}function Ta(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yn(e[n],t[n]))return!1;return!0}function La(e,t,n,r,l,a){return va=a,ba=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,D.H=null===e||null===e.memoizedState?Qo:Wo,Ca=!1,a=n(r,l),Ca=!1,Ea&&(a=Ra(t,n,r,l)),Oa(e),a}function Oa(e){D.H=qo;var t=null!==ka&&null!==ka.next;if(va=0,wa=ka=ba=null,Sa=!1,_a=0,Pa=null,t)throw Error(o(300));null===e||Pi||null!==(e=e.dependencies)&&Cl(e)&&(Pi=!0)}function Ra(e,t,n,r){ba=e;var l=0;do{if(Ea&&(Pa=null),_a=0,Ea=!1,25<=l)throw Error(o(301));if(l+=1,wa=ka=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}D.H=Ko,a=t(n,r)}while(Ea);return a}function Da(){var e=D.H,t=e.useState()[0];return t="function"==typeof t.then?ja(t):t,e=e.useState()[0],(null!==ka?ka.memoizedState:null)!==e&&(ba.flags|=1024),t}function Fa(){var e=0!==xa;return xa=0,e}function Ma(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Aa(e){if(Sa){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}Sa=!1}va=0,wa=ka=ba=null,Ea=!1,_a=xa=0,Pa=null}function Ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===wa?ba.memoizedState=wa=e:wa=wa.next=e,wa}function Ua(){if(null===ka){var e=ba.alternate;e=null!==e?e.memoizedState:null}else e=ka.next;var t=null===wa?ba.memoizedState:wa.next;if(null!==t)wa=t,ka=e;else{if(null===e){if(null===ba.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(ka=e).memoizedState,baseState:ka.baseState,baseQueue:ka.baseQueue,queue:ka.queue,next:null},null===wa?ba.memoizedState=wa=e:wa=wa.next=e}return wa}function ja(e){var t=_a;return _a+=1,null===Pa&&(Pa=[]),e=Xl(Pa,e,t),t=ba,null===(null===wa?t.memoizedState:wa.next)&&(t=t.alternate,D.H=null===t||null===t.memoizedState?Qo:Wo),e}function Ha(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return ja(e);if(e.$$typeof===w)return _l(e)}throw Error(o(438,String(e)))}function $a(e){var t=null,n=ba.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=ba.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ba.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=z;return t.index++,n}function Va(e,t){return"function"==typeof t?t(e):t}function Ba(e){return qa(Ua(),ka,e)}function qa(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var i=l.next;l.next=a.next,a.next=i}t.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{var u=i=null,s=null,c=t=l.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(as&d)===d:(va&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===Al&&(f=!0);else{if((va&p)===p){c=c.next,p===Al&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=a):s=s.next=d,ba.lanes|=p,ps|=p}d=c.action,Ca&&n(a,d),a=c.hasEagerState?c.eagerState:n(a,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=a):s=s.next=p,ba.lanes|=d,ps|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=a:s.next=u,!Yn(a,e.memoizedState)&&(Pi=!0,f&&null!==(n=Il)))throw n;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Qa(e){var t=Ua(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,a=t.memoizedState;if(null!==l){n.pending=null;var i=l=l.next;do{a=e(a,i.action),i=i.next}while(i!==l);Yn(a,t.memoizedState)||(Pi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Wa(e,t,n){var r=ba,l=Ua(),a=al;if(a){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Yn((ka||l).memoizedState,n);if(i&&(l.memoizedState=n,Pi=!0),l=l.queue,yo(2048,8,Ga.bind(null,r,l,e),[e]),l.getSnapshot!==t||i||null!==wa&&1&wa.memoizedState.tag){if(r.flags|=2048,mo(9,{destroy:void 0,resource:void 0},Ya.bind(null,r,l,n,t),null),null===rs)throw Error(o(349));a||124&va||Ka(r,t,n)}return n}function Ka(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ba.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},ba.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ya(e,t,n,r){t.value=n,t.getSnapshot=r,Xa(t)&&Ja(e)}function Ga(e,t,n){return n((function(){Xa(t)&&Ja(e)}))}function Xa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Yn(e,n)}catch(e){return!0}}function Ja(e){var t=Lr(e,2);null!==t&&Ms(t,0,2)}function Za(e){var t=Ia();if("function"==typeof e){var n=e;if(e=n(),Ca){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:e},t}function eo(e,t,n,r){return e.baseState=n,qa(e,ka,"function"==typeof r?r:Va)}function to(e,t,n,r,l){if($o(e))throw Error(o(485));if(null!==(e=t.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==D.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,no(t,a)):(a.next=n.next,t.pending=n.next=a)}}function no(e,t){var n=t.action,r=t.payload,l=e.state;if(t.isTransition){var a=D.T,o={};D.T=o;try{var i=n(l,r),u=D.S;null!==u&&u(o,i),ro(e,t,i)}catch(n){ao(e,t,n)}finally{D.T=a}}else try{ro(e,t,a=n(l,r))}catch(n){ao(e,t,n)}}function ro(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){lo(e,t,n)}),(function(n){return ao(e,t,n)})):lo(e,t,n)}function lo(e,t,n){t.status="fulfilled",t.value=n,oo(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,no(e,n)))}function ao(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,oo(t),t=t.next}while(t!==r)}e.action=null}function oo(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function io(e,t){return t}function uo(e,t){if(al){var n=rs.formState;if(null!==n){e:{var r=ba;if(al){if(ll){t:{for(var l=ll,a=il;8!==l.nodeType;){if(!a){l=null;break t}if(null===(l=vf(l.nextSibling))){l=null;break t}}l="F!"===(a=l.data)||"F"===a?l:null}if(l){ll=vf(l.nextSibling),r="F!"===l.data;break e}}sl(r)}r=!1}r&&(t=n[0])}}return(n=Ia()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:io,lastRenderedState:t},n.queue=r,n=Uo.bind(null,ba,r),r.dispatch=n,r=Za(!1),a=Ho.bind(null,ba,!1,r.queue),l={state:t,dispatch:null,action:e,pending:null},(r=Ia()).queue=l,n=to.bind(null,ba,l,a,n),l.dispatch=n,r.memoizedState=e,[t,n,!1]}function so(e){return co(Ua(),ka,e)}function co(e,t,n){if(t=qa(e,t,io)[0],e=Ba(Va)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=ja(t)}catch(e){if(e===ql)throw Wl;throw e}else r=t;var l=(t=Ua()).queue,a=l.dispatch;return n!==t.memoizedState&&(ba.flags|=2048,mo(9,{destroy:void 0,resource:void 0},fo.bind(null,l,n),null)),[r,a,e]}function fo(e,t){e.action=t}function po(e){var t=Ua(),n=ka;if(null!==n)return co(t,n,e);Ua(),t=t.memoizedState;var r=(n=Ua()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function mo(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=ba.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ba.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ho(){return Ua().memoizedState}function go(e,t,n,r){var l=Ia();r=void 0===r?null:r,ba.flags|=e,l.memoizedState=mo(1|t,{destroy:void 0,resource:void 0},n,r)}function yo(e,t,n,r){var l=Ua();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==ka&&null!==r&&Ta(r,ka.memoizedState.deps)?l.memoizedState=mo(t,a,n,r):(ba.flags|=e,l.memoizedState=mo(1|t,a,n,r))}function vo(e,t){go(8390656,8,e,t)}function bo(e,t){yo(2048,8,e,t)}function ko(e,t){return yo(4,2,e,t)}function wo(e,t){return yo(4,4,e,t)}function So(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function Eo(e,t,n){n=null!=n?n.concat([e]):null,yo(4,4,So.bind(null,t,e),n)}function Co(){}function xo(e,t){var n=Ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Ta(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _o(e,t){var n=Ua();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Ta(t,r[1]))return r[0];if(r=e(),Ca){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function Po(e,t,n){return void 0===n||1073741824&va?e.memoizedState=t:(e.memoizedState=n,e=Fs(),ba.lanes|=e,ps|=e,n)}function zo(e,t,n,r){return Yn(n,t)?n:null!==pa.current?(e=Po(e,n,r),Yn(e,t)||(Pi=!0),e):42&va?(e=Fs(),ba.lanes|=e,ps|=e,t):(Pi=!0,e.memoizedState=n)}function No(e,t,n,r,l){var a=F.p;F.p=0!==a&&8>a?a:8;var o,i,u,s=D.T,c={};D.T=c,Ho(e,!1,t,n);try{var f=l(),d=D.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?jo(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Ds()):jo(e,t,r,Ds())}catch(n){jo(e,t,{then:function(){},status:"rejected",reason:n},Ds())}finally{F.p=a,D.T=s}}function To(){}function Lo(e,t,n,r){if(5!==e.tag)throw Error(o(476));var l=Oo(e).queue;No(e,l,t,M,null===n?To:function(){return Ro(e),n(r)})}function Oo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:M,baseState:M,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:M},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Va,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function Ro(e){jo(e,Oo(e).next.queue,{},Ds())}function Do(){return _l(Yf)}function Fo(){return Ua().memoizedState}function Mo(){return Ua().memoizedState}function Ao(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Ds(),r=aa(t,e=la(n),n);return null!==r&&(Ms(r,0,n),oa(r,t,n)),t={cache:Rl()},void(e.payload=t)}t=t.return}}function Io(e,t,n){var r=Ds();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},$o(e)?Vo(t,n):null!==(n=Tr(e,t,n,r))&&(Ms(n,0,r),Bo(n,t,r))}function Uo(e,t,n){jo(e,t,n,Ds())}function jo(e,t,n,r){var l={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if($o(e))Vo(t,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=a(o,n);if(l.hasEagerState=!0,l.eagerState=i,Yn(i,o))return Nr(e,t,l,0),null===rs&&zr(),!1}catch(e){}if(null!==(n=Tr(e,t,l,r)))return Ms(n,0,r),Bo(n,t,r),!0}return!1}function Ho(e,t,n,r){if(r={lane:2,revertLane:Nc(),action:r,hasEagerState:!1,eagerState:null,next:null},$o(e)){if(t)throw Error(o(479))}else null!==(t=Tr(e,n,r,2))&&Ms(t,0,2)}function $o(e){var t=e.alternate;return e===ba||null!==t&&t===ba}function Vo(e,t){Ea=Sa=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Bo(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Pe(e,n)}}var qo={readContext:_l,use:Ha,useCallback:Na,useContext:Na,useEffect:Na,useImperativeHandle:Na,useLayoutEffect:Na,useInsertionEffect:Na,useMemo:Na,useReducer:Na,useRef:Na,useState:Na,useDebugValue:Na,useDeferredValue:Na,useTransition:Na,useSyncExternalStore:Na,useId:Na,useHostTransitionStatus:Na,useFormState:Na,useActionState:Na,useOptimistic:Na,useMemoCache:Na,useCacheRefresh:Na},Qo={readContext:_l,use:Ha,useCallback:function(e,t){return Ia().memoizedState=[e,void 0===t?null:t],e},useContext:_l,useEffect:vo,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,go(4194308,4,So.bind(null,t,e),n)},useLayoutEffect:function(e,t){return go(4194308,4,e,t)},useInsertionEffect:function(e,t){go(4,2,e,t)},useMemo:function(e,t){var n=Ia();t=void 0===t?null:t;var r=e();if(Ca){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Ia();if(void 0!==n){var l=n(t);if(Ca){de(!0);try{n(t)}finally{de(!1)}}}else l=t;return r.memoizedState=r.baseState=l,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},r.queue=e,e=e.dispatch=Io.bind(null,ba,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ia().memoizedState=e},useState:function(e){var t=(e=Za(e)).queue,n=Uo.bind(null,ba,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Co,useDeferredValue:function(e,t){return Po(Ia(),e,t)},useTransition:function(){var e=Za(!1);return e=No.bind(null,ba,e.queue,!0,!1),Ia().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=ba,l=Ia();if(al){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===rs)throw Error(o(349));124&as||Ka(r,t,n)}l.memoizedState=n;var a={value:n,getSnapshot:t};return l.queue=a,vo(Ga.bind(null,r,a,e),[e]),r.flags|=2048,mo(9,{destroy:void 0,resource:void 0},Ya.bind(null,r,a,n,t),null),n},useId:function(){var e=Ia(),t=rs.identifierPrefix;if(al){var n=Jr;t="«"+t+"R"+(n=(Xr&~(1<<32-pe(Xr)-1)).toString(32)+n),0<(n=xa++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=za++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Do,useFormState:uo,useActionState:uo,useOptimistic:function(e){var t=Ia();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Ho.bind(null,ba,!0,n),n.dispatch=t,[e,t]},useMemoCache:$a,useCacheRefresh:function(){return Ia().memoizedState=Ao.bind(null,ba)}},Wo={readContext:_l,use:Ha,useCallback:xo,useContext:_l,useEffect:bo,useImperativeHandle:Eo,useInsertionEffect:ko,useLayoutEffect:wo,useMemo:_o,useReducer:Ba,useRef:ho,useState:function(){return Ba(Va)},useDebugValue:Co,useDeferredValue:function(e,t){return zo(Ua(),ka.memoizedState,e,t)},useTransition:function(){var e=Ba(Va)[0],t=Ua().memoizedState;return["boolean"==typeof e?e:ja(e),t]},useSyncExternalStore:Wa,useId:Fo,useHostTransitionStatus:Do,useFormState:so,useActionState:so,useOptimistic:function(e,t){return eo(Ua(),0,e,t)},useMemoCache:$a,useCacheRefresh:Mo},Ko={readContext:_l,use:Ha,useCallback:xo,useContext:_l,useEffect:bo,useImperativeHandle:Eo,useInsertionEffect:ko,useLayoutEffect:wo,useMemo:_o,useReducer:Qa,useRef:ho,useState:function(){return Qa(Va)},useDebugValue:Co,useDeferredValue:function(e,t){var n=Ua();return null===ka?Po(n,e,t):zo(n,ka.memoizedState,e,t)},useTransition:function(){var e=Qa(Va)[0],t=Ua().memoizedState;return["boolean"==typeof e?e:ja(e),t]},useSyncExternalStore:Wa,useId:Fo,useHostTransitionStatus:Do,useFormState:po,useActionState:po,useOptimistic:function(e,t){var n=Ua();return null!==ka?eo(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:$a,useCacheRefresh:Mo},Yo=null,Go=0;function Xo(e){var t=Go;return Go+=1,null===Yo&&(Yo=[]),Xl(Yo,e,t)}function Jo(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Zo(e,t){if(t.$$typeof===p)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ei(e){return(0,e._init)(e._payload)}function ti(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function l(e,t){return(e=Ir(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=$r(n,e.mode,r)).return=e,t):((t=l(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===g?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===_&&ei(a)===t.type)?(Jo(t=l(t,n.props),n),t.return=e,t):(Jo(t=jr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vr(n,e.mode,r)).return=e,t):((t=l(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Hr(n,e.mode,r,a)).return=e,t):((t=l(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=$r(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case m:return Jo(n=jr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Vr(t,e.mode,n)).return=e,t;case _:return d(e,t=(0,t._init)(t._payload),n)}if(R(t)||T(t))return(t=Hr(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,Xo(t),n);if(t.$$typeof===w)return d(e,Pl(e,t),n);Zo(e,t)}return null}function p(e,t,n,r){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==l?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case m:return n.key===l?s(e,t,n,r):null;case h:return n.key===l?c(e,t,n,r):null;case _:return p(e,t,n=(l=n._init)(n._payload),r)}if(R(n)||T(n))return null!==l?null:f(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,Xo(n),r);if(n.$$typeof===w)return p(e,t,Pl(e,n),r);Zo(e,n)}return null}function y(e,t,n,r,l){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case m:return s(t,e=e.get(null===r.key?n:r.key)||null,r,l);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,l);case _:return y(e,t,n,r=(0,r._init)(r._payload),l)}if(R(r)||T(r))return f(t,e=e.get(n)||null,r,l,null);if("function"==typeof r.then)return y(e,t,n,Xo(r),l);if(r.$$typeof===w)return y(e,t,n,Pl(t,r),l);Zo(t,r)}return null}function v(u,s,c,f){if("object"==typeof c&&null!==c&&c.type===g&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case m:e:{for(var b=c.key;null!==s;){if(s.key===b){if((b=c.type)===g){if(7===s.tag){n(u,s.sibling),(f=l(s,c.props.children)).return=u,u=f;break e}}else if(s.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===_&&ei(b)===s.type){n(u,s.sibling),Jo(f=l(s,c.props),c),f.return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}c.type===g?((f=Hr(c.props.children,u.mode,f,c.key)).return=u,u=f):(Jo(f=jr(c.type,c.key,c.props,null,u.mode,f),c),f.return=u,u=f)}return i(u);case h:e:{for(b=c.key;null!==s;){if(s.key===b){if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){n(u,s.sibling),(f=l(s,c.children||[])).return=u,u=f;break e}n(u,s);break}t(u,s),s=s.sibling}(f=Vr(c,u.mode,f)).return=u,u=f}return i(u);case _:return v(u,s,c=(b=c._init)(c._payload),f)}if(R(c))return function(l,o,i,u){for(var s=null,c=null,f=o,m=o=0,h=null;null!==f&&m<i.length;m++){f.index>m?(h=f,f=null):h=f.sibling;var g=p(l,f,i[m],u);if(null===g){null===f&&(f=h);break}e&&f&&null===g.alternate&&t(l,f),o=a(g,o,m),null===c?s=g:c.sibling=g,c=g,f=h}if(m===i.length)return n(l,f),al&&Zr(l,m),s;if(null===f){for(;m<i.length;m++)null!==(f=d(l,i[m],u))&&(o=a(f,o,m),null===c?s=f:c.sibling=f,c=f);return al&&Zr(l,m),s}for(f=r(f);m<i.length;m++)null!==(h=y(f,l,m,i[m],u))&&(e&&null!==h.alternate&&f.delete(null===h.key?m:h.key),o=a(h,o,m),null===c?s=h:c.sibling=h,c=h);return e&&f.forEach((function(e){return t(l,e)})),al&&Zr(l,m),s}(u,s,c,f);if(T(c)){if("function"!=typeof(b=T(c)))throw Error(o(150));return function(l,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,m=i,h=i=0,g=null,v=u.next();null!==m&&!v.done;h++,v=u.next()){m.index>h?(g=m,m=null):g=m.sibling;var b=p(l,m,v.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(l,m),i=a(b,i,h),null===f?c=b:f.sibling=b,f=b,m=g}if(v.done)return n(l,m),al&&Zr(l,h),c;if(null===m){for(;!v.done;h++,v=u.next())null!==(v=d(l,v.value,s))&&(i=a(v,i,h),null===f?c=v:f.sibling=v,f=v);return al&&Zr(l,h),c}for(m=r(m);!v.done;h++,v=u.next())null!==(v=y(m,l,h,v.value,s))&&(e&&null!==v.alternate&&m.delete(null===v.key?h:v.key),i=a(v,i,h),null===f?c=v:f.sibling=v,f=v);return e&&m.forEach((function(e){return t(l,e)})),al&&Zr(l,h),c}(u,s,c=b.call(c),f)}if("function"==typeof c.then)return v(u,s,Xo(c),f);if(c.$$typeof===w)return v(u,s,Pl(u,c),f);Zo(u,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==s&&6===s.tag?(n(u,s.sibling),(f=l(s,c)).return=u,u=f):(n(u,s),(f=$r(c,u.mode,f)).return=u,u=f),i(u)):n(u,s)}return function(e,t,n,r){try{Go=0;var l=v(e,t,n,r);return Yo=null,l}catch(t){if(t===ql||t===Wl)throw t;var a=Mr(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var ni=ti(!0),ri=ti(!1),li=U(null),ai=null;function oi(e){var t=e.alternate;H(ci,1&ci.current),H(li,e),null===ai&&(null===t||null!==pa.current||null!==t.memoizedState)&&(ai=e)}function ii(e){if(22===e.tag){if(H(ci,ci.current),H(li,e),null===ai){var t=e.alternate;null!==t&&null!==t.memoizedState&&(ai=e)}}else ui()}function ui(){H(ci,ci.current),H(li,li.current)}function si(e){j(li),ai===e&&(ai=null),j(ci)}var ci=U(0);function fi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||yf(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function di(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var pi={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ds(),l=la(r);l.payload=t,null!=n&&(l.callback=n),null!==(t=aa(e,l,r))&&(Ms(t,0,r),oa(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ds(),l=la(r);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=aa(e,l,r))&&(Ms(t,0,r),oa(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ds(),r=la(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=aa(e,r,n))&&(Ms(t,0,n),oa(t,e,n))}};function mi(e,t,n,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&Gn(n,r)&&Gn(l,a))}function hi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&pi.enqueueReplaceState(t,t.state,null)}function gi(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var l in n===t&&(n=d({},n)),e)void 0===n[l]&&(n[l]=e[l]);return n}var yi="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function vi(e){yi(e)}function bi(e){console.error(e)}function ki(e){yi(e)}function wi(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Si(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Ei(e,t,n){return(n=la(n)).tag=3,n.payload={element:null},n.callback=function(){wi(e,t)},n}function Ci(e){return(e=la(e)).tag=3,e}function xi(e,t,n,r){var l=n.type.getDerivedStateFromError;if("function"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){Si(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Si(t,n,r),"function"!=typeof l&&(null===Cs?Cs=new Set([this]):Cs.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var _i=Error(o(461)),Pi=!1;function zi(e,t,n,r){t.child=null===e?ri(t,null,n,r):ni(t,e.child,n,r)}function Ni(e,t,n,r,l){n=n.render;var a=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return xl(t),r=La(e,t,n,o,a,l),i=Fa(),null===e||Pi?(al&&i&&tl(t),t.flags|=1,zi(e,t,r,l),t.child):(Ma(e,t,l),Yi(e,t,l))}function Ti(e,t,n,r,l){if(null===e){var a=n.type;return"function"!=typeof a||Ar(a)||void 0!==a.defaultProps||null!==n.compare?((e=jr(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Li(e,t,a,r,l))}if(a=e.child,!Gi(e,l)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:Gn)(o,r)&&e.ref===t.ref)return Yi(e,t,l)}return t.flags|=1,(e=Ir(a,r)).ref=t.ref,e.return=t,t.child=e}function Li(e,t,n,r,l){if(null!==e){var a=e.memoizedProps;if(Gn(a,r)&&e.ref===t.ref){if(Pi=!1,t.pendingProps=r=a,!Gi(e,l))return t.lanes=e.lanes,Yi(e,t,l);131072&e.flags&&(Pi=!0)}}return Fi(e,t,n,r,l)}function Oi(e,t,n){var r=t.pendingProps,l=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(l=t.child=e.child,a=0;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Ri(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ri(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Vl(0,null!==a?a.cachePool:null),null!==a?ha(t,a):ga(),ii(t)}else null!==a?(Vl(0,a.cachePool),ha(t,a),ui(),t.memoizedState=null):(null!==e&&Vl(0,null),ga(),ui());return zi(e,t,l,n),t.child}function Ri(e,t,n,r){var l=$l();return l=null===l?null:{parent:Ol._currentValue,pool:l},t.memoizedState={baseLanes:n,cachePool:l},null!==e&&Vl(0,null),ga(),ii(t),null!==e&&El(e,t,r,!0),null}function Di(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function Fi(e,t,n,r,l){return xl(t),n=La(e,t,n,r,void 0,l),r=Fa(),null===e||Pi?(al&&r&&tl(t),t.flags|=1,zi(e,t,n,l),t.child):(Ma(e,t,l),Yi(e,t,l))}function Mi(e,t,n,r,l,a){return xl(t),t.updateQueue=null,n=Ra(t,r,n,l),Oa(e),r=Fa(),null===e||Pi?(al&&r&&tl(t),t.flags|=1,zi(e,t,n,a),t.child):(Ma(e,t,a),Yi(e,t,a))}function Ai(e,t,n,r,l){if(xl(t),null===t.stateNode){var a=Dr,o=n.contextType;"object"==typeof o&&null!==o&&(a=_l(o)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=pi,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},na(t),o=n.contextType,a.context="object"==typeof o&&null!==o?_l(o):Dr,a.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(di(t,n,o,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(o=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&pi.enqueueReplaceState(a,a.state,null),ca(t,r,a,l),sa(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var i=t.memoizedProps,u=gi(n,i);a.props=u;var s=a.context,c=n.contextType;o=Dr,"object"==typeof c&&null!==c&&(o=_l(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||s!==o)&&hi(t,a,r,o),ta=!1;var d=t.memoizedState;a.state=d,ca(t,r,a,l),sa(),s=t.memoizedState,i||d!==s||ta?("function"==typeof f&&(di(t,n,f,r),s=t.memoizedState),(u=ta||mi(t,n,u,r,d,s,o))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=o,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,ra(e,t),c=gi(n,o=t.memoizedProps),a.props=c,f=t.pendingProps,d=a.context,s=n.contextType,u=Dr,"object"==typeof s&&null!==s&&(u=_l(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o!==f||d!==u)&&hi(t,a,r,u),ta=!1,d=t.memoizedState,a.state=d,ca(t,r,a,l),sa();var p=t.memoizedState;o!==f||d!==p||ta||null!==e&&null!==e.dependencies&&Cl(e.dependencies)?("function"==typeof i&&(di(t,n,i,r),p=t.memoizedState),(c=ta||mi(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Cl(e.dependencies))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Di(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=ni(t,e.child,null,l),t.child=ni(t,null,n,l)):zi(e,t,n,l),t.memoizedState=a.state,e=t.child):e=Yi(e,t,l),e}function Ii(e,t,n,r){return pl(),t.flags|=256,zi(e,t,n,r),t.child}var Ui={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function ji(e){return{baseLanes:e,cachePool:Bl()}}function Hi(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=gs),e}function $i(e,t,n){var r,l=t.pendingProps,a=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&ci.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(al){if(a?oi(t):ui(),al){var u,s=ll;if(u=s){e:{for(u=s,s=il;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=vf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Gr?{id:Xr,overflow:Jr}:null,retryLane:536870912,hydrationErrors:null},(u=Mr(18,null,null,0)).stateNode=s,u.return=t,t.child=u,rl=t,ll=null,u=!0):u=!1}u||sl(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return yf(s)?t.lanes=32:t.lanes=536870912,null;si(t)}return s=l.children,l=l.fallback,a?(ui(),s=Bi({mode:"hidden",children:s},a=t.mode),l=Hr(l,a,n,null),s.return=t,l.return=t,s.sibling=l,t.child=s,(a=t.child).memoizedState=ji(n),a.childLanes=Hi(e,r,n),t.memoizedState=Ui,l):(oi(t),Vi(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(oi(t),t.flags&=-257,t=qi(e,t,n)):null!==t.memoizedState?(ui(),t.child=e.child,t.flags|=128,t=null):(ui(),a=l.fallback,s=t.mode,l=Bi({mode:"visible",children:l.children},s),(a=Hr(a,s,n,null)).flags|=2,l.return=t,a.return=t,l.sibling=a,t.child=l,ni(t,e.child,null,n),(l=t.child).memoizedState=ji(n),l.childLanes=Hi(e,r,n),t.memoizedState=Ui,t=a);else if(oi(t),yf(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(o(419))).stack="",l.digest=r,hl({value:l,source:null,stack:null}),t=qi(e,t,n)}else if(Pi||El(e,t,n,!1),r=!!(n&e.childLanes),Pi||r){if(null!==(r=rs)&&0!==(l=(l=42&(l=n&-n)?1:ze(l))&(r.suspendedLanes|n)?0:l)&&l!==u.retryLane)throw u.retryLane=l,Lr(e,l),Ms(r,0,l),_i;"$?"===s.data||Ws(),t=qi(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,ll=vf(s.nextSibling),rl=t,al=!0,ol=null,il=!1,null!==e&&(Kr[Yr++]=Xr,Kr[Yr++]=Jr,Kr[Yr++]=Gr,Xr=e.id,Jr=e.overflow,Gr=t),(t=Vi(t,l.children)).flags|=4096);return t}return a?(ui(),a=l.fallback,s=t.mode,c=(u=e.child).sibling,(l=Ir(u,{mode:"hidden",children:l.children})).subtreeFlags=65011712&u.subtreeFlags,null!==c?a=Ir(c,a):(a=Hr(a,s,n,null)).flags|=2,a.return=t,l.return=t,l.sibling=a,t.child=l,l=a,a=t.child,null===(s=e.child.memoizedState)?s=ji(n):(null!==(u=s.cachePool)?(c=Ol._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Bl(),s={baseLanes:s.baseLanes|n,cachePool:u}),a.memoizedState=s,a.childLanes=Hi(e,r,n),t.memoizedState=Ui,l):(oi(t),e=(n=e.child).sibling,(n=Ir(n,{mode:"visible",children:l.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Vi(e,t){return(t=Bi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Bi(e,t){return(e=Mr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function qi(e,t,n){return ni(t,e.child,null,n),(e=Vi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Qi(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wl(e.return,t,n)}function Wi(e,t,n,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=l)}function Ki(e,t,n){var r=t.pendingProps,l=r.revealOrder,a=r.tail;if(zi(e,t,r.children,n),2&(r=ci.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qi(e,n,t);else if(19===e.tag)Qi(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(H(ci,r),l){case"forwards":for(n=t.child,l=null;null!==n;)null!==(e=n.alternate)&&null===fi(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),Wi(t,!1,l,n,a);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===fi(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}Wi(t,!0,n,null,a);break;case"together":Wi(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Yi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ps|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(El(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Ir(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ir(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gi(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Cl(e))}function Xi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Pi=!0;else{if(!(Gi(e,n)||128&t.flags))return Pi=!1,function(e,t,n){switch(t.tag){case 3:Q(t,t.stateNode.containerInfo),bl(0,Ol,e.memoizedState.cache),pl();break;case 27:case 5:K(t);break;case 4:Q(t,t.stateNode.containerInfo);break;case 10:bl(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(oi(t),t.flags|=128,null):n&t.child.childLanes?$i(e,t,n):(oi(t),null!==(e=Yi(e,t,n))?e.sibling:null);oi(t);break;case 19:var l=!!(128&e.flags);if((r=!!(n&t.childLanes))||(El(e,t,n,!1),r=!!(n&t.childLanes)),l){if(r)return Ki(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),H(ci,ci.current),r)break;return null;case 22:case 23:return t.lanes=0,Oi(e,t,n);case 24:bl(0,Ol,e.memoizedState.cache)}return Yi(e,t,n)}(e,t,n);Pi=!!(131072&e.flags)}else Pi=!1,al&&1048576&t.flags&&el(t,Wr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,l=r._init;if(r=l(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((l=r.$$typeof)===S){t.tag=11,t=Ni(null,t,r,e,n);break e}if(l===x){t.tag=14,t=Ti(null,t,r,e,n);break e}}throw t=O(r)||r,Error(o(306,t,""))}Ar(r)?(e=gi(r,e),t.tag=1,t=Ai(null,t,r,e,n)):(t.tag=0,t=Fi(null,t,r,e,n))}return t;case 0:return Fi(e,t,t.type,t.pendingProps,n);case 1:return Ai(e,t,r=t.type,l=gi(r,t.pendingProps),n);case 3:e:{if(Q(t,t.stateNode.containerInfo),null===e)throw Error(o(387));r=t.pendingProps;var a=t.memoizedState;l=a.element,ra(e,t),ca(t,r,null,n);var i=t.memoizedState;if(r=i.cache,bl(0,Ol,r),r!==a.cache&&Sl(t,[Ol],n,!0),sa(),r=i.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Ii(e,t,r,n);break e}if(r!==l){hl(l=Cr(Error(o(424)),t)),t=Ii(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,ll=vf(e.firstChild),rl=t,al=!0,ol=null,il=!0,n=ri(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pl(),r===l){t=Yi(e,t,n);break e}zi(e,t,r,n)}t=t.child}return t;case 26:return Di(e,t),null===e?(n=Nf(t.type,null,t.pendingProps,null))?t.memoizedState=n:al||(n=t.type,e=t.pendingProps,(r=rf(B.current).createElement(n))[Oe]=t,r[Re]=e,ef(r,n,e),qe(r),t.stateNode=r):t.memoizedState=Nf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return K(t),null===e&&al&&(r=t.stateNode=wf(t.type,t.pendingProps,B.current),rl=t,il=!0,l=ll,mf(t.type)?(bf=l,ll=vf(r.firstChild)):ll=l),zi(e,t,t.pendingProps.children,n),Di(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&al&&((l=r=ll)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var l=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ue])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==l.rel||e.getAttribute("href")!==(null==l.href||""===l.href?null:l.href)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin)||e.getAttribute("title")!==(null==l.title?null:l.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==l.src?null:l.src)||e.getAttribute("type")!==(null==l.type?null:l.type)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==l.name?null:""+l.name;if("hidden"===l.type&&e.getAttribute("name")===a)return e}if(null===(e=vf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,il))?(t.stateNode=r,rl=t,ll=vf(r.firstChild),il=!1,l=!0):l=!1),l||sl(t)),K(t),l=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,of(l,a)?r=null:null!==i&&of(l,i)&&(t.flags|=32),null!==t.memoizedState&&(l=La(e,t,Da,null,null,n),Yf._currentValue=l),Di(e,t),zi(e,t,r,n),t.child;case 6:return null===e&&al&&((e=n=ll)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=vf(e.nextSibling)))return null}return e}(n,t.pendingProps,il))?(t.stateNode=n,rl=t,ll=null,e=!0):e=!1),e||sl(t)),null;case 13:return $i(e,t,n);case 4:return Q(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ni(t,null,r,n):zi(e,t,r,n),t.child;case 11:return Ni(e,t,t.type,t.pendingProps,n);case 7:return zi(e,t,t.pendingProps,n),t.child;case 8:case 12:return zi(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,bl(0,t.type,r.value),zi(e,t,r.children,n),t.child;case 9:return l=t.type._context,r=t.pendingProps.children,xl(t),r=r(l=_l(l)),t.flags|=1,zi(e,t,r,n),t.child;case 14:return Ti(e,t,t.type,t.pendingProps,n);case 15:return Li(e,t,t.type,t.pendingProps,n);case 19:return Ki(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Bi(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Ir(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return Oi(e,t,n);case 24:return xl(t),r=_l(Ol),null===e?(null===(l=$l())&&(l=rs,a=Rl(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=n),l=a),t.memoizedState={parent:r,cache:l},na(t),bl(0,Ol,l)):(!!(e.lanes&n)&&(ra(e,t),ca(t,null,null,n),sa()),l=e.memoizedState,a=t.memoizedState,l.parent!==r?(l={parent:r,cache:r},t.memoizedState=l,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=l),bl(0,Ol,r)):(r=a.cache,bl(0,Ol,r),r!==l.cache&&Sl(t,[Ol],n,!0))),zi(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}function Ji(e){e.flags|=4}function Zi(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!$f(t)){if(null!==(t=li.current)&&((4194048&as)===as?null!==ai:(62914560&as)!==as&&!(536870912&as)||t!==ai))throw Jl=Kl,Ql;e.flags|=8192}}function eu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ee():536870912,e.lanes|=t,ys|=t)}function tu(e,t){if(!al)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function nu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=65011712&l.subtreeFlags,r|=65011712&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ru(e,t,n){var r=t.pendingProps;switch(nl(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return nu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),kl(Ol),W(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(dl(t)?Ji(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,ml())),nu(t),null;case 26:return n=t.memoizedState,null===e?(Ji(t),null!==n?(nu(t),Zi(t,n)):(nu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Ji(t),nu(t),Zi(t,n)):(nu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Ji(t),nu(t),t.flags&=-16777217),null;case 27:Y(t),n=B.current;var l=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return nu(t),null}e=$.current,dl(t)?cl(t):(e=wf(l,r,n),t.stateNode=e,Ji(t))}return nu(t),null;case 5:if(Y(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return nu(t),null}if(e=$.current,dl(t))cl(t);else{switch(l=rf(B.current),e){case 1:e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?l.createElement("select",{is:r.is}):l.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?l.createElement(n,{is:r.is}):l.createElement(n)}}e[Oe]=t,e[Re]=r;e:for(l=t.child;null!==l;){if(5===l.tag||6===l.tag)e.appendChild(l.stateNode);else if(4!==l.tag&&27!==l.tag&&null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)break e;for(;null===l.sibling;){if(null===l.return||l.return===t)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}t.stateNode=e;e:switch(ef(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Ji(t)}}return nu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Ji(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=B.current,dl(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(l=rl))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[Oe]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Gc(e.nodeValue,n)))||sl(t)}else(e=rf(e).createTextNode(r))[Oe]=t,t.stateNode=e}return nu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=dl(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[Oe]=t}else pl(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;nu(t),l=!1}else l=ml(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=l),l=!0;if(!l)return 256&t.flags?(si(t),t):(si(t),null)}if(si(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){l=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),eu(t,t.updateQueue),nu(t),null;case 4:return W(),null===e&&jc(t.stateNode.containerInfo),nu(t),null;case 10:return kl(t.type),nu(t),null;case 19:if(j(ci),null===(l=t.memoizedState))return nu(t),null;if(r=!!(128&t.flags),null===(a=l.rendering))if(r)tu(l,!1);else{if(0!==ds||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=fi(e))){for(t.flags|=128,tu(l,!1),e=a.updateQueue,t.updateQueue=e,eu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ur(n,e),n=n.sibling;return H(ci,1&ci.current|2),t.child}e=e.sibling}null!==l.tail&&te()>Ss&&(t.flags|=128,r=!0,tu(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=fi(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,eu(t,e),tu(l,!0),null===l.tail&&"hidden"===l.tailMode&&!a.alternate&&!al)return nu(t),null}else 2*te()-l.renderingStartTime>Ss&&536870912!==n&&(t.flags|=128,r=!0,tu(l,!1),t.lanes=4194304);l.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=l.last)?e.sibling=a:t.child=a,l.last=a)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=te(),t.sibling=null,e=ci.current,H(ci,r?1&e|2:1&e),t):(nu(t),null);case 22:case 23:return si(t),ya(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(nu(t),6&t.subtreeFlags&&(t.flags|=8192)):nu(t),null!==(n=t.updateQueue)&&eu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&j(Hl),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),kl(Ol),nu(t),null;case 25:case 30:return null}throw Error(o(156,t.tag))}function lu(e,t){switch(nl(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return kl(Ol),W(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return Y(t),null;case 13:if(si(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));pl()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return j(ci),null;case 4:return W(),null;case 10:return kl(t.type),null;case 22:case 23:return si(t),ya(),null!==e&&j(Hl),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return kl(Ol),null;default:return null}}function au(e,t){switch(nl(t),t.tag){case 3:kl(Ol),W();break;case 26:case 27:case 5:Y(t);break;case 4:W();break;case 13:si(t);break;case 19:j(ci);break;case 10:kl(t.type);break;case 22:case 23:si(t),ya(),null!==e&&j(Hl);break;case 24:kl(Ol)}}function ou(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var l=r.next;n=l;do{if((n.tag&e)===e){r=void 0;var a=n.create,o=n.inst;r=a(),o.destroy=r}n=n.next}while(n!==l)}}catch(e){cc(t,t.return,e)}}function iu(e,t,n){try{var r=t.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,l=t;var u=n,s=i;try{s()}catch(e){cc(l,u,e)}}}r=r.next}while(r!==a)}}catch(e){cc(t,t.return,e)}}function uu(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{da(t,n)}catch(t){cc(e,e.return,t)}}}function su(e,t,n){n.props=gi(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){cc(e,t,n)}}function cu(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){cc(e,t,n)}}function fu(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){cc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){cc(e,t,n)}else n.current=null}function du(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){cc(e,e.return,t)}}function pu(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var l=null,a=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||Jc(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":a=m;break;case"name":l=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(o(137,t));break;default:m!==d&&Jc(e,t,p,m,r,d)}}return void gt(e,i,u,s,c,f,a,l);case"select":for(a in m=i=u=p=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(a)||Jc(e,t,a,null,r,s)}for(l in r)if(a=r[l],s=n[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case"value":p=a;break;case"defaultValue":u=a;break;case"multiple":i=a;default:a!==s&&Jc(e,t,l,a,r,s)}return t=u,n=i,r=m,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(l=n[u],n.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Jc(e,t,u,null,r,l)}for(i in r)if(l=r[i],a=n[i],r.hasOwnProperty(i)&&(null!=l||null!=a))switch(i){case"value":p=l;break;case"defaultValue":m=l;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(o(91));break;default:l!==a&&Jc(e,t,i,l,r,a)}return void kt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:Jc(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Jc(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Jc(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Jc(e,t,c,p,r,m)}return;default:if(_t(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Zc(e,t,y,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Zc(e,t,f,p,r,m);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Jc(e,t,v,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||Jc(e,t,d,p,r,m)}(r,e.type,n,t),r[Re]=t}catch(t){cc(e,e.return,t)}}function mu(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&mf(e.type)||4===e.tag}function hu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||mu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&mf(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function gu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xc));else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function yu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&mf(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(yu(e,t,n),e=e.sibling;null!==e;)yu(e,t,n),e=e.sibling}function vu(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,l=t.attributes;l.length;)t.removeAttributeNode(l[0]);ef(t,r,n),t[Oe]=e,t[Re]=n}catch(t){cc(e,e.return,t)}}var bu=!1,ku=!1,wu=!1,Su="function"==typeof WeakSet?WeakSet:Set,Eu=null;function Cu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Au(e,n),4&r&&ou(5,n);break;case 1:if(Au(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){cc(n,n.return,e)}else{var l=gi(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(l,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){cc(n,n.return,e)}}64&r&&uu(n),512&r&&cu(n,n.return);break;case 3:if(Au(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{da(e,t)}catch(e){cc(n,n.return,e)}}break;case 27:null===t&&4&r&&vu(n);case 26:case 5:Au(e,n),null===t&&4&r&&du(n),512&r&&cu(n,n.return);break;case 12:Au(e,n);break;case 13:Au(e,n),4&r&&Tu(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=mc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||bu)){t=null!==t&&null!==t.memoizedState||ku,l=bu;var a=ku;bu=r,(ku=t)&&!a?Uu(e,n,!!(8772&n.subtreeFlags)):Au(e,n),bu=l,ku=a}break;case 30:break;default:Au(e,n)}}function xu(e){var t=e.alternate;null!==t&&(e.alternate=null,xu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&je(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var _u=null,Pu=!1;function zu(e,t,n){for(n=n.child;null!==n;)Nu(e,t,n),n=n.sibling}function Nu(e,t,n){if(fe&&"function"==typeof fe.onCommitFiberUnmount)try{fe.onCommitFiberUnmount(ce,n)}catch(e){}switch(n.tag){case 26:ku||fu(n,t),zu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:ku||fu(n,t);var r=_u,l=Pu;mf(n.type)&&(_u=n.stateNode,Pu=!1),zu(e,t,n),Sf(n.stateNode),_u=r,Pu=l;break;case 5:ku||fu(n,t);case 6:if(r=_u,l=Pu,_u=null,zu(e,t,n),Pu=l,null!==(_u=r))if(Pu)try{(9===_u.nodeType?_u.body:"HTML"===_u.nodeName?_u.ownerDocument.body:_u).removeChild(n.stateNode)}catch(e){cc(n,t,e)}else try{_u.removeChild(n.stateNode)}catch(e){cc(n,t,e)}break;case 18:null!==_u&&(Pu?(hf(9===(e=_u).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),zd(e)):hf(_u,n.stateNode));break;case 4:r=_u,l=Pu,_u=n.stateNode.containerInfo,Pu=!0,zu(e,t,n),_u=r,Pu=l;break;case 0:case 11:case 14:case 15:ku||iu(2,n,t),ku||iu(4,n,t),zu(e,t,n);break;case 1:ku||(fu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&su(n,t,r)),zu(e,t,n);break;case 21:zu(e,t,n);break;case 22:ku=(r=ku)||null!==n.memoizedState,zu(e,t,n),ku=r;break;default:zu(e,t,n)}}function Tu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{zd(e)}catch(e){cc(t,t.return,e)}}function Lu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new Su),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new Su),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function Ou(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var l=n[r],a=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:if(mf(u.type)){_u=u.stateNode,Pu=!1;break e}break;case 5:_u=u.stateNode,Pu=!1;break e;case 3:case 4:_u=u.stateNode.containerInfo,Pu=!0;break e}u=u.return}if(null===_u)throw Error(o(160));Nu(a,i,l),_u=null,Pu=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Du(t,e),t=t.sibling}var Ru=null;function Du(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:Ou(t,e),Fu(e),4&r&&(iu(3,e,e.return),ou(3,e),iu(5,e,e.return));break;case 1:Ou(t,e),Fu(e),512&r&&(ku||null===n||fu(n,n.return)),64&r&&bu&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var l=Ru;if(Ou(t,e),Fu(e),512&r&&(ku||null===n||fu(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,l=l.ownerDocument||l;t:switch(r){case"title":(!(a=l.getElementsByTagName("title")[0])||a[Ue]||a[Oe]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector("head > title"))),ef(a,r,n),a[Oe]=e,qe(a),r=a;break e;case"link":var i=jf("link","href",l).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((a=i[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}ef(a=l.createElement(r),r,n),l.head.appendChild(a);break;case"meta":if(i=jf("meta","content",l).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((a=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}ef(a=l.createElement(r),r,n),l.head.appendChild(a);break;default:throw Error(o(468,r))}a[Oe]=e,qe(a),r=a}e.stateNode=r}else Hf(l,e.type,e.stateNode);else e.stateNode=Ff(l,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Hf(l,e.type,e.stateNode):Ff(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&pu(e,e.memoizedProps,n.memoizedProps)}break;case 27:Ou(t,e),Fu(e),512&r&&(ku||null===n||fu(n,n.return)),null!==n&&4&r&&pu(e,e.memoizedProps,n.memoizedProps);break;case 5:if(Ou(t,e),Fu(e),512&r&&(ku||null===n||fu(n,n.return)),32&e.flags){l=e.stateNode;try{St(l,"")}catch(t){cc(e,e.return,t)}}4&r&&null!=e.stateNode&&pu(e,l=e.memoizedProps,null!==n?n.memoizedProps:l),1024&r&&(wu=!0);break;case 6:if(Ou(t,e),Fu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){cc(e,e.return,t)}}break;case 3:if(Uf=null,l=Ru,Ru=xf(t.containerInfo),Ou(t,e),Ru=l,Fu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{zd(t.containerInfo)}catch(t){cc(e,e.return,t)}wu&&(wu=!1,Mu(e));break;case 4:r=Ru,Ru=xf(e.stateNode.containerInfo),Ou(t,e),Fu(e),Ru=r;break;case 12:default:Ou(t,e),Fu(e);break;case 13:Ou(t,e),Fu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(ws=te()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lu(e,r));break;case 22:l=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=bu,f=ku;if(bu=c||l,ku=f||s,Ou(t,e),ku=f,bu=c,Fu(e),8192&r)e:for(t=e.stateNode,t._visibility=l?-2&t._visibility:1|t._visibility,l&&(null===n||s||bu||ku||Iu(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(a=s.stateNode,l)"function"==typeof(i=a.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){cc(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=l?"":s.memoizedProps}catch(e){cc(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Lu(e,n));break;case 19:Ou(t,e),Fu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Lu(e,r));case 30:case 21:}}function Fu(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(mu(r)){n=r;break}r=r.return}if(null==n)throw Error(o(160));switch(n.tag){case 27:var l=n.stateNode;yu(e,hu(e),l);break;case 5:var a=n.stateNode;32&n.flags&&(St(a,""),n.flags&=-33),yu(e,hu(e),a);break;case 3:case 4:var i=n.stateNode.containerInfo;gu(e,hu(e),i);break;default:throw Error(o(161))}}catch(t){cc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Mu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Mu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Au(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cu(e,t.alternate,t),t=t.sibling}function Iu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:iu(4,t,t.return),Iu(t);break;case 1:fu(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&su(t,t.return,n),Iu(t);break;case 27:Sf(t.stateNode);case 26:case 5:fu(t,t.return),Iu(t);break;case 22:null===t.memoizedState&&Iu(t);break;default:Iu(t)}e=e.sibling}}function Uu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,l=e,a=t,o=a.flags;switch(a.tag){case 0:case 11:case 15:Uu(l,a,n),ou(4,a);break;case 1:if(Uu(l,a,n),"function"==typeof(l=(r=a).stateNode).componentDidMount)try{l.componentDidMount()}catch(e){cc(r,r.return,e)}if(null!==(l=(r=a).updateQueue)){var i=r.stateNode;try{var u=l.shared.hiddenCallbacks;if(null!==u)for(l.shared.hiddenCallbacks=null,l=0;l<u.length;l++)fa(u[l],i)}catch(e){cc(r,r.return,e)}}n&&64&o&&uu(a),cu(a,a.return);break;case 27:vu(a);case 26:case 5:Uu(l,a,n),n&&null===r&&4&o&&du(a),cu(a,a.return);break;case 12:Uu(l,a,n);break;case 13:Uu(l,a,n),n&&4&o&&Tu(l,a);break;case 22:null===a.memoizedState&&Uu(l,a,n),cu(a,a.return);break;case 30:break;default:Uu(l,a,n)}t=t.sibling}}function ju(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Dl(n))}function Hu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Dl(e))}function $u(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Vu(e,t,n,r),t=t.sibling}function Vu(e,t,n,r){var l=t.flags;switch(t.tag){case 0:case 11:case 15:$u(e,t,n,r),2048&l&&ou(9,t);break;case 1:case 13:default:$u(e,t,n,r);break;case 3:$u(e,t,n,r),2048&l&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Dl(e)));break;case 12:if(2048&l){$u(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,o=a.id,i=a.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){cc(t,t.return,e)}}else $u(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,o=t.alternate,null!==t.memoizedState?2&a._visibility?$u(e,t,n,r):qu(e,t):2&a._visibility?$u(e,t,n,r):(a._visibility|=2,Bu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&l&&ju(o,t);break;case 24:$u(e,t,n,r),2048&l&&Hu(t.alternate,t)}}function Bu(e,t,n,r,l){for(l=l&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,o=t,i=n,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Bu(a,o,i,u,l),ou(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?2&c._visibility?Bu(a,o,i,u,l):qu(a,o):(c._visibility|=2,Bu(a,o,i,u,l)),l&&2048&s&&ju(o.alternate,o);break;case 24:Bu(a,o,i,u,l),l&&2048&s&&Hu(o.alternate,o);break;default:Bu(a,o,i,u,l)}t=t.sibling}}function qu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,l=r.flags;switch(r.tag){case 22:qu(n,r),2048&l&&ju(r.alternate,r);break;case 24:qu(n,r),2048&l&&Hu(r.alternate,r);break;default:qu(n,r)}t=t.sibling}}var Qu=8192;function Wu(e){if(e.subtreeFlags&Qu)for(e=e.child;null!==e;)Ku(e),e=e.sibling}function Ku(e){switch(e.tag){case 26:Wu(e),e.flags&Qu&&null!==e.memoizedState&&function(e,t,n){if(null===Vf)throw Error(o(475));var r=Vf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var l=Tf(n.href),a=e.querySelector(Lf(l));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=qf.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void qe(a);a=e.ownerDocument||e,n=Of(n),(l=Ef.get(l))&&Af(n,l),qe(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ef(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=qf.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Ru,e.memoizedState,e.memoizedProps);break;case 5:default:Wu(e);break;case 3:case 4:var t=Ru;Ru=xf(e.stateNode.containerInfo),Wu(e),Ru=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Qu,Qu=16777216,Wu(e),Qu=t):Wu(e))}}function Yu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Gu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Eu=r,Zu(r,e)}Yu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Xu(e),e=e.sibling}function Xu(e){switch(e.tag){case 0:case 11:case 15:Gu(e),2048&e.flags&&iu(9,e,e.return);break;case 3:case 12:default:Gu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Ju(e)):Gu(e)}}function Ju(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];Eu=r,Zu(r,e)}Yu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:iu(8,t,t.return),Ju(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Ju(t));break;default:Ju(t)}e=e.sibling}}function Zu(e,t){for(;null!==Eu;){var n=Eu;switch(n.tag){case 0:case 11:case 15:iu(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Dl(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,Eu=r;else e:for(n=e;null!==Eu;){var l=(r=Eu).sibling,a=r.return;if(xu(r),r===n){Eu=null;break e}if(null!==l){l.return=a,Eu=l;break e}Eu=a}}}var es={getCacheForType:function(e){var t=_l(Ol),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},ts="function"==typeof WeakMap?WeakMap:Map,ns=0,rs=null,ls=null,as=0,os=0,is=null,us=!1,ss=!1,cs=!1,fs=0,ds=0,ps=0,ms=0,hs=0,gs=0,ys=0,vs=null,bs=null,ks=!1,ws=0,Ss=1/0,Es=null,Cs=null,xs=0,_s=null,Ps=null,zs=0,Ns=0,Ts=null,Ls=null,Os=0,Rs=null;function Ds(){return 2&ns&&0!==as?as&-as:null!==D.T?0!==Al?Al:Nc():Te()}function Fs(){0===gs&&(gs=536870912&as&&!al?536870912:Se());var e=li.current;return null!==e&&(e.flags|=32),gs}function Ms(e,t,n){(e!==rs||2!==os&&9!==os)&&null===e.cancelPendingCommit||(Vs(e,0),js(e,as,gs,!1)),xe(e,n),2&ns&&e===rs||(e===rs&&(!(2&ns)&&(ms|=n),4===ds&&js(e,as,gs,!1)),Sc(e))}function As(e,t,n){if(6&ns)throw Error(o(327));for(var r=!n&&!(124&t)&&!(t&e.expiredLanes)||ke(e,t),l=r?function(e,t){var n=ns;ns|=2;var r=qs(),l=Qs();rs!==e||as!==t?(Es=null,Ss=te()+500,Vs(e,t)):ss=ke(e,t);e:for(;;)try{if(0!==os&&null!==ls){t=ls;var a=is;t:switch(os){case 1:os=0,is=null,Zs(e,t,a,1);break;case 2:case 9:if(Yl(a)){os=0,is=null,Js(t);break}t=function(){2!==os&&9!==os||rs!==e||(os=7),Sc(e)},a.then(t,t);break e;case 3:os=7;break e;case 4:os=5;break e;case 7:Yl(a)?(os=0,is=null,Js(t)):(os=0,is=null,Zs(e,t,a,7));break;case 5:var i=null;switch(ls.tag){case 26:i=ls.memoizedState;case 5:case 27:var u=ls;if(!i||$f(i)){os=0,is=null;var s=u.sibling;if(null!==s)ls=s;else{var c=u.return;null!==c?(ls=c,ec(c)):ls=null}break t}}os=0,is=null,Zs(e,t,a,5);break;case 6:os=0,is=null,Zs(e,t,a,6);break;case 8:$s(),ds=6;break e;default:throw Error(o(462))}}Gs();break}catch(t){Bs(e,t)}return vl=yl=null,D.H=r,D.A=l,ns=n,null!==ls?0:(rs=null,as=0,zr(),ds)}(e,t):Ks(e,t,!0),a=r;;){if(0===l){ss&&!r&&js(e,t,0,!1);break}if(n=e.current.alternate,!a||Us(n)){if(2===l){if(a=t,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;l=vs;var s=u.current.memoizedState.isDehydrated;if(s&&(Vs(u,i).flags|=256),2!==(i=Ks(u,i,!1))){if(cs&&!s){u.errorRecoveryDisabledLanes|=a,ms|=a,l=4;break e}a=bs,bs=l,null!==a&&(null===bs?bs=a:bs.push.apply(bs,a))}l=i}if(a=!1,2!==l)continue}}if(1===l){Vs(e,0),js(e,t,0,!0);break}e:{switch(r=e,a=l){case 0:case 1:throw Error(o(345));case 4:if((4194048&t)!==t)break;case 6:js(r,t,gs,!us);break e;case 2:bs=null;break;case 3:case 5:break;default:throw Error(o(329))}if((62914560&t)===t&&10<(l=ws+300-te())){if(js(r,t,gs,!us),0!==be(r,0,!0))break e;r.timeoutHandle=sf(Is.bind(null,r,n,bs,Es,ks,t,gs,ms,ys,us,a,2,-0,0),l)}else Is(r,n,bs,Es,ks,t,gs,ms,ys,us,a,0,-0,0)}break}l=Ks(e,t,!1),a=!1}Sc(e)}function Is(e,t,n,r,l,a,i,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||!(16785408&~d))&&(Vf={stylesheets:null,count:0,unsuspend:Bf},Ku(t),null!==(d=function(){if(null===Vf)throw Error(o(475));var e=Vf;return e.stylesheets&&0===e.count&&Wf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Wf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=d(nc.bind(null,e,t,a,n,r,l,i,u,s,f,1,p,m)),void js(e,a,i,!c);nc(e,t,a,n,r,l,i,u,s)}function Us(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var l=n[r],a=l.getSnapshot;l=l.value;try{if(!Yn(a(),l))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function js(e,t,n,r){t&=~hs,t&=~ms,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var l=t;0<l;){var a=31-pe(l),o=1<<a;r[a]=-1,l&=~o}0!==n&&_e(e,n,t)}function Hs(){return!!(6&ns)||(Ec(0,!1),!1)}function $s(){if(null!==ls){if(0===os)var e=ls.return;else vl=yl=null,Aa(e=ls),Yo=null,Go=0,e=ls;for(;null!==e;)au(e.alternate,e),e=e.return;ls=null}}function Vs(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,cf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),$s(),rs=e,ls=n=Ir(e.current,null),as=t,os=0,is=null,us=!1,ss=ke(e,t),cs=!1,ys=gs=hs=ms=ps=ds=0,bs=vs=null,ks=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var l=31-pe(r),a=1<<l;t|=e[l],r&=~a}return fs=t,zr(),n}function Bs(e,t){ba=null,D.H=qo,t===ql||t===Wl?(t=Zl(),os=3):t===Ql?(t=Zl(),os=4):os=t===_i?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,is=t,null===ls&&(ds=1,wi(e,Cr(t,e.current)))}function qs(){var e=D.H;return D.H=qo,null===e?qo:e}function Qs(){var e=D.A;return D.A=es,e}function Ws(){ds=4,us||(4194048&as)!==as&&null!==li.current||(ss=!0),!(134217727&ps)&&!(134217727&ms)||null===rs||js(rs,as,gs,!1)}function Ks(e,t,n){var r=ns;ns|=2;var l=qs(),a=Qs();rs===e&&as===t||(Es=null,Vs(e,t)),t=!1;var o=ds;e:for(;;)try{if(0!==os&&null!==ls){var i=ls,u=is;switch(os){case 8:$s(),o=6;break e;case 3:case 2:case 9:case 6:null===li.current&&(t=!0);var s=os;if(os=0,is=null,Zs(e,i,u,s),n&&ss){o=0;break e}break;default:s=os,os=0,is=null,Zs(e,i,u,s)}}Ys(),o=ds;break}catch(t){Bs(e,t)}return t&&e.shellSuspendCounter++,vl=yl=null,ns=r,D.H=l,D.A=a,null===ls&&(rs=null,as=0,zr()),o}function Ys(){for(;null!==ls;)Xs(ls)}function Gs(){for(;null!==ls&&!Z();)Xs(ls)}function Xs(e){var t=Xi(e.alternate,e,fs);e.memoizedProps=e.pendingProps,null===t?ec(e):ls=t}function Js(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Mi(n,t,t.pendingProps,t.type,void 0,as);break;case 11:t=Mi(n,t,t.pendingProps,t.type.render,t.ref,as);break;case 5:Aa(t);default:au(n,t),t=Xi(n,t=ls=Ur(t,fs),fs)}e.memoizedProps=e.pendingProps,null===t?ec(e):ls=t}function Zs(e,t,n,r){vl=yl=null,Aa(t),Yo=null,Go=0;var l=t.return;try{if(function(e,t,n,r,l){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&El(t,n,l,!0),null!==(n=li.current)){switch(n.tag){case 13:return null===ai?Ws():null===n.alternate&&0===ds&&(ds=3),n.flags&=-257,n.flags|=65536,n.lanes=l,r===Kl?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),fc(e,r,l)),!1;case 22:return n.flags|=65536,r===Kl?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),fc(e,r,l)),!1}throw Error(o(435,n.tag))}return fc(e,r,l),Ws(),!1}if(al)return null!==(t=li.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=l,r!==ul&&hl(Cr(e=Error(o(422),{cause:r}),n))):(r!==ul&&hl(Cr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,l&=-l,e.lanes|=l,r=Cr(r,n),ia(e,l=Ei(e.stateNode,r,l)),4!==ds&&(ds=2)),!1;var a=Error(o(520),{cause:r});if(a=Cr(a,n),null===vs?vs=[a]:vs.push(a),4!==ds&&(ds=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=l&-l,n.lanes|=e,ia(n,e=Ei(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Cs&&Cs.has(a))))return n.flags|=65536,l&=-l,n.lanes|=l,xi(l=Ci(l),e,n,r),ia(n,l),!1}n=n.return}while(null!==n);return!1}(e,l,t,n,as))return ds=1,wi(e,Cr(n,e.current)),void(ls=null)}catch(t){if(null!==l)throw ls=l,t;return ds=1,wi(e,Cr(n,e.current)),void(ls=null)}32768&t.flags?(al||1===r?e=!0:ss||536870912&as?e=!1:(us=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=li.current)&&13===r.tag&&(r.flags|=16384)),tc(t,e)):ec(t)}function ec(e){var t=e;do{if(32768&t.flags)return void tc(t,us);e=t.return;var n=ru(t.alternate,t,fs);if(null!==n)return void(ls=n);if(null!==(t=t.sibling))return void(ls=t);ls=t=e}while(null!==t);0===ds&&(ds=5)}function tc(e,t){do{var n=lu(e.alternate,e);if(null!==n)return n.flags&=32767,void(ls=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ls=e);ls=e=n}while(null!==e);ds=6,ls=null}function nc(e,t,n,r,l,a,i,u,s){e.cancelPendingCommit=null;do{ic()}while(0!==xs);if(6&ns)throw Error(o(327));if(null!==t){if(t===e.current)throw Error(o(177));if(a=t.lanes|t.childLanes,function(e,t,n,r,l,a){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-pe(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&_e(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~t))}(e,n,a|=Pr,i,u,s),e===rs&&(ls=rs=null,as=0),Ps=t,_s=e,zs=n,Ns=a,Ts=l,Ls=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,X(ae,(function(){return uc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=D.T,D.T=null,l=F.p,F.p=2,i=ns,ns|=4;try{!function(e,t){if(e=e.containerInfo,tf=rd,tr(e=er(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var l=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==l&&3!==d.nodeType||(u=i+l),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===l&&(u=i),p===a&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(nf={focusedElem:e,selectionRange:n},rd=!1,Eu=t;null!==Eu;)if(e=(t=Eu).child,1024&t.subtreeFlags&&null!==e)e.return=t,Eu=e;else for(;null!==Eu;){switch(a=(t=Eu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,l=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var h=gi(n.type,l,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){cc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))gf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":gf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,Eu=e;break}Eu=t.return}}(e,t)}finally{ns=i,F.p=l,D.T=r}}xs=1,rc(),lc(),ac()}}function rc(){if(1===xs){xs=0;var e=_s,t=Ps,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=D.T,D.T=null;var r=F.p;F.p=2;var l=ns;ns|=4;try{Du(t,e);var a=nf,o=er(e.containerInfo),i=a.focusedElem,u=a.selectionRange;if(o!==i&&i&&i.ownerDocument&&Zn(i.ownerDocument.documentElement,i)){if(null!==u&&tr(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(o=g,g=h,h=o);var y=Jn(i,h),v=Jn(i,g);if(y&&v&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==v.node||p.focusOffset!==v.offset)){var b=f.createRange();b.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(b),p.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),p.addRange(b))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var k=f[i];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}rd=!!tf,nf=tf=null}finally{ns=l,F.p=r,D.T=n}}e.current=t,xs=2}}function lc(){if(2===xs){xs=0;var e=_s,t=Ps,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=D.T,D.T=null;var r=F.p;F.p=2;var l=ns;ns|=4;try{Cu(e,t.alternate,t)}finally{ns=l,F.p=r,D.T=n}}xs=3}}function ac(){if(4===xs||3===xs){xs=0,ee();var e=_s,t=Ps,n=zs,r=Ls;10256&t.subtreeFlags||10256&t.flags?xs=5:(xs=0,Ps=_s=null,oc(e,e.pendingLanes));var l=e.pendingLanes;if(0===l&&(Cs=null),Ne(n),t=t.stateNode,fe&&"function"==typeof fe.onCommitFiberRoot)try{fe.onCommitFiberRoot(ce,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=D.T,l=F.p,F.p=2,D.T=null;try{for(var a=e.onRecoverableError,o=0;o<r.length;o++){var i=r[o];a(i.value,{componentStack:i.stack})}}finally{D.T=t,F.p=l}}3&zs&&ic(),Sc(e),l=e.pendingLanes,4194090&n&&42&l?e===Rs?Os++:(Os=0,Rs=e):Os=0,Ec(0,!1)}}function oc(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Dl(t))}function ic(e){return rc(),lc(),ac(),uc()}function uc(){if(5!==xs)return!1;var e=_s,t=Ns;Ns=0;var n=Ne(zs),r=D.T,l=F.p;try{F.p=32>n?32:n,D.T=null,n=Ts,Ts=null;var a=_s,i=zs;if(xs=0,Ps=_s=null,zs=0,6&ns)throw Error(o(331));var u=ns;if(ns|=4,Xu(a.current),Vu(a,a.current,i,n),ns=u,Ec(0,!1),fe&&"function"==typeof fe.onPostCommitFiberRoot)try{fe.onPostCommitFiberRoot(ce,a)}catch(e){}return!0}finally{F.p=l,D.T=r,oc(e,t)}}function sc(e,t,n){t=Cr(n,t),null!==(e=aa(e,t=Ei(e.stateNode,t,2),2))&&(xe(e,2),Sc(e))}function cc(e,t,n){if(3===e.tag)sc(e,e,n);else for(;null!==t;){if(3===t.tag){sc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cs||!Cs.has(r))){e=Cr(n,e),null!==(r=aa(t,n=Ci(2),2))&&(xi(n,r,t,e),xe(r,2),Sc(r));break}}t=t.return}}function fc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ts;var l=new Set;r.set(t,l)}else void 0===(l=r.get(t))&&(l=new Set,r.set(t,l));l.has(n)||(cs=!0,l.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,rs===e&&(as&n)===n&&(4===ds||3===ds&&(62914560&as)===as&&300>te()-ws?!(2&ns)&&Vs(e,0):hs|=n,ys===as&&(ys=0)),Sc(e)}function pc(e,t){0===t&&(t=Ee()),null!==(e=Lr(e,t))&&(xe(e,t),Sc(e))}function mc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),pc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),pc(e,n)}var gc=null,yc=null,vc=!1,bc=!1,kc=!1,wc=0;function Sc(e){e!==yc&&null===e.next&&(null===yc?gc=yc=e:yc=yc.next=e),bc=!0,vc||(vc=!0,df((function(){6&ns?X(re,Cc):xc()})))}function Ec(e,t){if(!kc&&bc){kc=!0;do{for(var n=!1,r=gc;null!==r;){if(!t)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-pe(42|e)+1)-1,a=201326741&(a&=l&~(o&~i))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,zc(r,a))}else a=as,!(3&(a=be(r,r===rs?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ke(r,a)||(n=!0,zc(r,a));r=r.next}}while(n);kc=!1}}function Cc(){xc()}function xc(){bc=vc=!1;var e,t=0;0!==wc&&(((e=window.event)&&"popstate"===e.type?e!==uf&&(uf=e,!0):(uf=null,!1))&&(t=wc),wc=0);for(var n=te(),r=null,l=gc;null!==l;){var a=l.next,o=_c(l,n);0===o?(l.next=null,null===r?gc=a:r.next=a,null===a&&(yc=r)):(r=l,(0!==t||3&o)&&(bc=!0)),l=a}Ec(t,!1)}function _c(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var o=31-pe(a),i=1<<o,u=l[o];-1===u?i&n&&!(i&r)||(l[o]=we(i,t)):u<=t&&(e.expiredLanes|=i),a&=~i}if(n=as,n=be(e,e===(t=rs)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===os||9===os)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&J(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||ke(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&J(r),Ne(n)){case 2:case 8:n=le;break;case 32:default:n=ae;break;case 268435456:n=ie}return r=Pc.bind(null,e),n=X(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&J(r),e.callbackPriority=2,e.callbackNode=null,2}function Pc(e,t){if(0!==xs&&5!==xs)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ic()&&e.callbackNode!==n)return null;var r=as;return 0===(r=be(e,e===rs?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(As(e,r,t),_c(e,te()),null!=e.callbackNode&&e.callbackNode===n?Pc.bind(null,e):null)}function zc(e,t){if(ic())return null;As(e,t,!0)}function Nc(){return 0===wc&&(wc=Se()),wc}function Tc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Nt(""+e)}function Lc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Oc=0;Oc<wr.length;Oc++){var Rc=wr[Oc];Sr(Rc.toLowerCase(),"on"+(Rc[0].toUpperCase()+Rc.slice(1)))}Sr(pr,"onAnimationEnd"),Sr(mr,"onAnimationIteration"),Sr(hr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(gr,"onTransitionRun"),Sr(yr,"onTransitionStart"),Sr(vr,"onTransitionCancel"),Sr(br,"onTransitionEnd"),Ye("onMouseEnter",["mouseout","mouseover"]),Ye("onMouseLeave",["mouseout","mouseover"]),Ye("onPointerEnter",["pointerout","pointerover"]),Ye("onPointerLeave",["pointerout","pointerover"]),Ke("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ke("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ke("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ke("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ke("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ke("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Dc));function Mc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){yi(e)}l.currentTarget=null,a=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){yi(e)}l.currentTarget=null,a=u}}}}function Ac(e,t){var n=t[Fe];void 0===n&&(n=t[Fe]=new Set);var r=e+"__bubble";n.has(r)||(Hc(t,e,2,!1),n.add(r))}function Ic(e,t,n){var r=0;t&&(r|=4),Hc(n,e,r,t)}var Uc="_reactListening"+Math.random().toString(36).slice(2);function jc(e){if(!e[Uc]){e[Uc]=!0,Qe.forEach((function(t){"selectionchange"!==t&&(Fc.has(t)||Ic(t,!1,e),Ic(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Uc]||(t[Uc]=!0,Ic("selectionchange",!1,t))}}function Hc(e,t,n,r){switch(cd(t)){case 2:var l=ld;break;case 8:l=ad;break;default:l=od}n=l.bind(null,t,n,e),l=void 0,!Ut||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(l=!0),r?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function $c(e,t,n,r,l){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===l)break;if(4===o)for(o=r.return;null!==o;){var s=o.tag;if((3===s||4===s)&&o.stateNode.containerInfo===l)return;o=o.return}for(;null!==i;){if(null===(o=He(i)))return;if(5===(s=o.tag)||6===s||26===s||27===s){r=a=o;continue e}i=i.parentNode}}r=r.return}Mt((function(){var r=a,l=Lt(n),o=[];e:{var i=kr.get(e);if(void 0!==i){var s=Zt,c=e;switch(e){case"keypress":if(0===qt(n))break e;case"keydown":case"keyup":s=hn;break;case"focusin":c="focus",s=an;break;case"focusout":c="blur",s=an;break;case"beforeblur":case"afterblur":s=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=rn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=ln;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=yn;break;case pr:case mr:case hr:s=on;break;case br:s=vn;break;case"scroll":case"scrollend":s=tn;break;case"wheel":s=bn;break;case"copy":case"cut":case"paste":s=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=gn;break;case"toggle":case"beforetoggle":s=kn}var f=!!(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==i?i+"Capture":null:i;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=At(h,p))&&f.push(Vc(h,g,m)),d)break;h=h.return}0<f.length&&(i=new s(i,c,null,n,l),o.push({event:i,listeners:f}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Tt||!(c=n.relatedTarget||n.fromElement)||!He(c)&&!c[De])&&(s||i)&&(i=l.window===l?l:(i=l.ownerDocument)?i.defaultView||i.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?He(c):null)&&(d=u(c),f=c.tag,c!==d||5!==f&&27!==f&&6!==f)&&(c=null)):(s=null,c=r),s!==c)){if(f=rn,g="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(f=gn,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==s?i:Ve(s),m=null==c?i:Ve(c),(i=new f(g,h+"leave",s,n,l)).target=d,i.relatedTarget=m,g=null,He(l)===r&&((f=new f(p,h+"enter",c,n,l)).target=m,f.relatedTarget=d,g=f),d=g,s&&c)e:{for(p=c,h=0,m=f=s;m;m=qc(m))h++;for(m=0,g=p;g;g=qc(g))m++;for(;0<h-m;)f=qc(f),h--;for(;0<m-h;)p=qc(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break e;f=qc(f),p=qc(p)}f=null}else f=null;null!==s&&Qc(o,i,s,f,!1),null!==c&&null!==d&&Qc(o,d,c,f,!0)}if("select"===(s=(i=r?Ve(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===s&&"file"===i.type)var y=In;else if(On(i))if(Un)y=Kn;else{y=Qn;var v=qn}else!(s=i.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&_t(r.elementType)&&(y=In):y=Wn;switch(y&&(y=y(e,r))?Rn(o,y,n,l):(v&&v(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&vt(i,"number",i.value)),v=r?Ve(r):window,e){case"focusin":(On(v)||"true"===v.contentEditable)&&(rr=v,lr=r,ar=null);break;case"focusout":ar=lr=rr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(o,n,l);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(o,n,l)}var b;if(Sn)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else Tn?zn(e,n)&&(k="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(k="onCompositionStart");k&&(xn&&"ko"!==n.locale&&(Tn||"onCompositionStart"!==k?"onCompositionEnd"===k&&Tn&&(b=Bt()):($t="value"in(Ht=l)?Ht.value:Ht.textContent,Tn=!0)),0<(v=Bc(r,k)).length&&(k=new sn(k,e,null,n,l),o.push({event:k,listeners:v}),(b||null!==(b=Nn(n)))&&(k.data=b))),(b=Cn?function(e,t){switch(e){case"compositionend":return Nn(t);case"keypress":return 32!==t.which?null:(Pn=!0,_n);case"textInput":return(e=t.data)===_n&&Pn?null:e;default:return null}}(e,n):function(e,t){if(Tn)return"compositionend"===e||!Sn&&zn(e,t)?(e=Bt(),Vt=$t=Ht=null,Tn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return xn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(k=Bc(r,"onBeforeInput")).length&&(v=new sn("onBeforeInput","beforeinput",null,n,l),o.push({event:v,listeners:k}),v.data=b),function(e,t,n,r,l){if("submit"===t&&n&&n.stateNode===l){var a=Tc((l[Re]||null).action),o=r.submitter;o&&null!==(t=(t=o[Re]||null)?Tc(t.formAction):o.getAttribute("formAction"))&&(a=t,o=null);var i=new Zt("action","action",null,r,l);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==wc){var e=o?Lc(l,o):new FormData(l);Lo(n,{pending:!0,data:e,method:l.method,action:a},null,e)}}else"function"==typeof a&&(i.preventDefault(),e=o?Lc(l,o):new FormData(l),Lo(n,{pending:!0,data:e,method:l.method,action:a},a,e))},currentTarget:l}]})}}(o,e,r,n,l)}Mc(o,t)}))}function Vc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Bc(e,t){for(var n=t+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;if(5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=At(e,n))&&r.unshift(Vc(e,l,a)),null!=(l=At(e,t))&&r.push(Vc(e,l,a))),3===e.tag)return r;e=e.return}return[]}function qc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Qc(e,t,n,r,l){for(var a=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,l?null!=(s=At(n,a))&&o.unshift(Vc(n,s,u)):l||null!=(s=At(n,a))&&o.push(Vc(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Wc=/\r\n?/g,Kc=/\u0000|\uFFFD/g;function Yc(e){return("string"==typeof e?e:""+e).replace(Wc,"\n").replace(Kc,"")}function Gc(e,t){return t=Yc(t),Yc(e)===t}function Xc(){}function Jc(e,t,n,r,l,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":nt(e,"class",r);break;case"tabIndex":nt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":nt(e,n,r);break;case"style":xt(e,r,a);break;case"data":if("object"!==t){nt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Nt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Jc(e,t,"name",l.name,l,null),Jc(e,t,"formEncType",l.formEncType,l,null),Jc(e,t,"formMethod",l.formMethod,l,null),Jc(e,t,"formTarget",l.formTarget,l,null)):(Jc(e,t,"encType",l.encType,l,null),Jc(e,t,"method",l.method,l,null),Jc(e,t,"target",l.target,l,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Nt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"onScroll":null!=r&&Ac("scroll",e);break;case"onScrollEnd":null!=r&&Ac("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Nt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Ac("beforetoggle",e),Ac("toggle",e),tt(e,"popover",r);break;case"xlinkActuate":rt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":rt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":rt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":rt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":rt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":rt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":rt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":rt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":rt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":tt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&tt(e,n=Pt.get(n)||n,r)}}function Zc(e,t,n,r,l,a){switch(n){case"style":xt(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&Ac("scroll",e);break;case"onScrollEnd":null!=r&&Ac("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:We.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(l=n.endsWith("Capture"),t=n.slice(2,l?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Re]||null)?a[n]:null)&&e.removeEventListener(t,a,l),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):tt(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,l)))}}function ef(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Ac("error",e),Ac("load",e);var r,l=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":l=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Jc(e,t,r,i,n,null)}}return a&&Jc(e,t,"srcSet",n.srcSet,n,null),void(l&&Jc(e,t,"src",n.src,n,null));case"input":Ac("invalid",e);var u=r=i=a=null,s=null,c=null;for(l in n)if(n.hasOwnProperty(l)){var f=n[l];if(null!=f)switch(l){case"name":a=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Jc(e,t,l,f,n,null)}}return yt(e,r,u,s,c,i,a,!1),void ft(e);case"select":for(a in Ac("invalid",e),l=i=r=null,n)if(n.hasOwnProperty(a)&&null!=(u=n[a]))switch(a){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":l=u;default:Jc(e,t,a,u,n,null)}return t=r,n=i,e.multiple=!!l,void(null!=t?bt(e,!!l,t,!1):null!=n&&bt(e,!!l,n,!0));case"textarea":for(i in Ac("invalid",e),r=a=l=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":l=u;break;case"defaultValue":a=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:Jc(e,t,i,u,n,null)}return wt(e,l,a,r),void ft(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(l=n[s])&&("selected"===s?e.selected=l&&"function"!=typeof l&&"symbol"!=typeof l:Jc(e,t,s,l,n,null));return;case"dialog":Ac("beforetoggle",e),Ac("toggle",e),Ac("cancel",e),Ac("close",e);break;case"iframe":case"object":Ac("load",e);break;case"video":case"audio":for(l=0;l<Dc.length;l++)Ac(Dc[l],e);break;case"image":Ac("error",e),Ac("load",e);break;case"details":Ac("toggle",e);break;case"embed":case"source":case"link":Ac("error",e),Ac("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(l=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Jc(e,t,c,l,n,null)}return;default:if(_t(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(l=n[f])&&Zc(e,t,f,l,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(l=n[u])&&Jc(e,t,u,l,n,null)}var tf=null,nf=null;function rf(e){return 9===e.nodeType?e:e.ownerDocument}function lf(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function af(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function of(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var uf=null,sf="function"==typeof setTimeout?setTimeout:void 0,cf="function"==typeof clearTimeout?clearTimeout:void 0,ff="function"==typeof Promise?Promise:void 0,df="function"==typeof queueMicrotask?queueMicrotask:void 0!==ff?function(e){return ff.resolve(null).then(e).catch(pf)}:sf;function pf(e){setTimeout((function(){throw e}))}function mf(e){return"head"===e}function hf(e,t){var n=t,r=0,l=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var o=e.ownerDocument;if(1&n&&Sf(o.documentElement),2&n&&Sf(o.body),4&n)for(Sf(n=o.head),o=n.firstChild;o;){var i=o.nextSibling,u=o.nodeName;o[Ue]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===o.rel.toLowerCase()||n.removeChild(o),o=i}}if(0===l)return e.removeChild(a),void zd(t);l--}else"$"===n||"$?"===n||"$!"===n?l++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);zd(t)}function gf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":gf(n),je(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function yf(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function vf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var bf=null;function kf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function wf(e,t,n){switch(t=rf(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}function Sf(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);je(e)}var Ef=new Map,Cf=new Set;function xf(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var _f=F.d;F.d={f:function(){var e=_f.f(),t=Hs();return e||t},r:function(e){var t=$e(e);null!==t&&5===t.tag&&"form"===t.type?Ro(t):_f.r(e)},D:function(e){_f.D(e),zf("dns-prefetch",e,null)},C:function(e,t){_f.C(e,t),zf("preconnect",e,t)},L:function(e,t,n){_f.L(e,t,n);var r=Pf;if(r&&e&&t){var l='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(l+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(l+='[imagesizes="'+ht(n.imageSizes)+'"]')):l+='[href="'+ht(e)+'"]';var a=l;switch(t){case"style":a=Tf(e);break;case"script":a=Rf(e)}Ef.has(a)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),Ef.set(a,e),null!==r.querySelector(l)||"style"===t&&r.querySelector(Lf(a))||"script"===t&&r.querySelector(Df(a))||(ef(t=r.createElement("link"),"link",e),qe(t),r.head.appendChild(t)))}},m:function(e,t){_f.m(e,t);var n=Pf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",l='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',a=l;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=Rf(e)}if(!Ef.has(a)&&(e=d({rel:"modulepreload",href:e},t),Ef.set(a,e),null===n.querySelector(l))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Df(a)))return}ef(r=n.createElement("link"),"link",e),qe(r),n.head.appendChild(r)}}},X:function(e,t){_f.X(e,t);var n=Pf;if(n&&e){var r=Be(n).hoistableScripts,l=Rf(e),a=r.get(l);a||((a=n.querySelector(Df(l)))||(e=d({src:e,async:!0},t),(t=Ef.get(l))&&If(e,t),qe(a=n.createElement("script")),ef(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}},S:function(e,t,n){_f.S(e,t,n);var r=Pf;if(r&&e){var l=Be(r).hoistableStyles,a=Tf(e);t=t||"default";var o=l.get(a);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(Lf(a)))i.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=Ef.get(a))&&Af(e,n);var u=o=r.createElement("link");qe(u),ef(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Mf(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},l.set(a,o)}}},M:function(e,t){_f.M(e,t);var n=Pf;if(n&&e){var r=Be(n).hoistableScripts,l=Rf(e),a=r.get(l);a||((a=n.querySelector(Df(l)))||(e=d({src:e,async:!0,type:"module"},t),(t=Ef.get(l))&&If(e,t),qe(a=n.createElement("script")),ef(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}}};var Pf="undefined"==typeof document?null:document;function zf(e,t,n){var r=Pf;if(r&&"string"==typeof t&&t){var l=ht(t);l='link[rel="'+e+'"][href="'+l+'"]',"string"==typeof n&&(l+='[crossorigin="'+n+'"]'),Cf.has(l)||(Cf.add(l),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(l)&&(ef(t=r.createElement("link"),"link",e),qe(t),r.head.appendChild(t)))}}function Nf(e,t,n,r){var l,a,i,u,s=(s=B.current)?xf(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Tf(n.href),(r=(n=Be(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Tf(n.href);var c=Be(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(Lf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),Ef.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},Ef.set(e,n),c||(l=s,a=e,i=n,u=f.state,l.querySelector('link[rel="preload"][as="style"]['+a+"]")?u.loading=1:(a=l.createElement("link"),u.preload=a,a.addEventListener("load",(function(){return u.loading|=1})),a.addEventListener("error",(function(){return u.loading|=2})),ef(a,"link",i),qe(a),l.head.appendChild(a))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Rf(n),(r=(n=Be(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function Tf(e){return'href="'+ht(e)+'"'}function Lf(e){return'link[rel="stylesheet"]['+e+"]"}function Of(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function Rf(e){return'[src="'+ht(e)+'"]'}function Df(e){return"script[async]"+e}function Ff(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,qe(r),r;var l=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return qe(r=(e.ownerDocument||e).createElement("style")),ef(r,"style",l),Mf(r,n.precedence,e),t.instance=r;case"stylesheet":l=Tf(n.href);var a=e.querySelector(Lf(l));if(a)return t.state.loading|=4,t.instance=a,qe(a),a;r=Of(n),(l=Ef.get(l))&&Af(r,l),qe(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),ef(a,"link",r),t.state.loading|=4,Mf(a,n.precedence,e),t.instance=a;case"script":return a=Rf(n.src),(l=e.querySelector(Df(a)))?(t.instance=l,qe(l),l):(r=n,(l=Ef.get(a))&&If(r=d({},n),l),qe(l=(e=e.ownerDocument||e).createElement("script")),ef(l,"link",r),e.head.appendChild(l),t.instance=l);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Mf(r,n.precedence,e));return t.instance}function Mf(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)a=i;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Af(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function If(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Uf=null;function jf(e,t,n){if(null===Uf){var r=new Map,l=Uf=new Map;l.set(n,r)}else(r=(l=Uf).get(n))||(r=new Map,l.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),l=0;l<n.length;l++){var a=n[l];if(!(a[Ue]||a[Oe]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var o=a.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(a):r.set(o,[a])}}return r}function Hf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function $f(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Vf=null;function Bf(){}function qf(){if(this.count--,0===this.count)if(this.stylesheets)Wf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Qf=null;function Wf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Qf=new Map,t.forEach(Kf,e),Qf=null,qf.call(e))}function Kf(e,t){if(!(4&t.state.loading)){var n=Qf.get(e);if(n)var r=n.get(null);else{n=new Map,Qf.set(e,n);for(var l=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<l.length;a++){var o=l[a];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(l=t.instance).getAttribute("data-precedence"),(a=n.get(o)||r)===r&&n.set(null,l),n.set(o,l),this.count++,r=qf.bind(this),l.addEventListener("load",r),l.addEventListener("error",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),t.state.loading|=4}}var Yf={$$typeof:w,Provider:null,Consumer:null,_currentValue:M,_currentValue2:M,_threadCount:0};function Gf(e,t,n,r,l,a,o,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Xf(e,t,n,r,l,a,o,i,u,s,c,f){return e=new Gf(e,t,n,o,i,u,s,f),t=1,!0===a&&(t|=24),a=Mr(3,null,null,t),e.current=a,a.stateNode=e,(t=Rl()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},na(a),e}function Jf(e){return e?e=Dr:Dr}function Zf(e,t,n,r,l,a){l=Jf(l),null===r.context?r.context=l:r.pendingContext=l,(r=la(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=aa(e,r,t))&&(Ms(n,0,t),oa(n,e,t))}function ed(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function td(e,t){ed(e,t),(e=e.alternate)&&ed(e,t)}function nd(e){if(13===e.tag){var t=Lr(e,67108864);null!==t&&Ms(t,0,67108864),td(e,67108864)}}var rd=!0;function ld(e,t,n,r){var l=D.T;D.T=null;var a=F.p;try{F.p=2,od(e,t,n,r)}finally{F.p=a,D.T=l}}function ad(e,t,n,r){var l=D.T;D.T=null;var a=F.p;try{F.p=8,od(e,t,n,r)}finally{F.p=a,D.T=l}}function od(e,t,n,r){if(rd){var l=id(r);if(null===l)$c(e,t,r,ud,n),bd(e,r);else if(function(e,t,n,r,l){switch(t){case"focusin":return dd=kd(dd,e,t,n,r,l),!0;case"dragenter":return pd=kd(pd,e,t,n,r,l),!0;case"mouseover":return md=kd(md,e,t,n,r,l),!0;case"pointerover":var a=l.pointerId;return hd.set(a,kd(hd.get(a)||null,e,t,n,r,l)),!0;case"gotpointercapture":return a=l.pointerId,gd.set(a,kd(gd.get(a)||null,e,t,n,r,l)),!0}return!1}(l,e,t,n,r))r.stopPropagation();else if(bd(e,r),4&t&&-1<vd.indexOf(e)){for(;null!==l;){var a=$e(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=ve(a.pendingLanes);if(0!==o){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-pe(o);i.entanglements[1]|=u,o&=~u}Sc(a),!(6&ns)&&(Ss=te()+500,Ec(0,!1))}}break;case 13:null!==(i=Lr(a,2))&&Ms(i,0,2),Hs(),td(a,2)}if(null===(a=id(r))&&$c(e,t,r,ud,n),a===l)break;l=a}null!==l&&r.stopPropagation()}else $c(e,t,r,null,n)}}function id(e){return sd(e=Lt(e))}var ud=null;function sd(e){if(ud=null,null!==(e=He(e))){var t=u(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=s(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return ud=e,null}function cd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ne()){case re:return 2;case le:return 8;case ae:case oe:return 32;case ie:return 268435456;default:return 32}default:return 32}}var fd=!1,dd=null,pd=null,md=null,hd=new Map,gd=new Map,yd=[],vd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function bd(e,t){switch(e){case"focusin":case"focusout":dd=null;break;case"dragenter":case"dragleave":pd=null;break;case"mouseover":case"mouseout":md=null;break;case"pointerover":case"pointerout":hd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":gd.delete(t.pointerId)}}function kd(e,t,n,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==t&&null!==(t=$e(t))&&nd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l),e)}function wd(e){var t=He(e.target);if(null!==t){var n=u(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=s(n)))return e.blockedOn=t,void function(e,t){var r=F.p;try{return F.p=e,function(){if(13===n.tag){var e=Ds();e=ze(e);var t=Lr(n,e);null!==t&&Ms(t,0,e),td(n,e)}}()}finally{F.p=r}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Sd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=id(e.nativeEvent);if(null!==n)return null!==(t=$e(n))&&nd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Tt=r,n.target.dispatchEvent(r),Tt=null,t.shift()}return!0}function Ed(e,t,n){Sd(e)&&n.delete(t)}function Cd(){fd=!1,null!==dd&&Sd(dd)&&(dd=null),null!==pd&&Sd(pd)&&(pd=null),null!==md&&Sd(md)&&(md=null),hd.forEach(Ed),gd.forEach(Ed)}function xd(e,t){e.blockedOn===t&&(e.blockedOn=null,fd||(fd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Cd)))}var _d=null;function Pd(e){_d!==e&&(_d=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){_d===e&&(_d=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],l=e[t+2];if("function"!=typeof r){if(null===sd(r||n))continue;break}var a=$e(n);null!==a&&(e.splice(t,3),t-=3,Lo(a,{pending:!0,data:l,method:n.method,action:r},r,l))}})))}function zd(e){function t(t){return xd(t,e)}null!==dd&&xd(dd,e),null!==pd&&xd(pd,e),null!==md&&xd(md,e),hd.forEach(t),gd.forEach(t);for(var n=0;n<yd.length;n++){var r=yd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<yd.length&&null===(n=yd[0]).blockedOn;)wd(n),null===n.blockedOn&&yd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var l=n[r],a=n[r+1],o=l[Re]||null;if("function"==typeof a)o||Pd(n);else if(o){var i=null;if(a&&a.hasAttribute("formAction")){if(l=a,o=a[Re]||null)i=o.formAction;else if(null!==sd(l))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),Pd(n)}}}function Nd(e){this._internalRoot=e}function Td(e){this._internalRoot=e}Td.prototype.render=Nd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Zf(t.current,Ds(),e,t,null,null)},Td.prototype.unmount=Nd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Zf(e.current,2,null,e,null,null),Hs(),t[De]=null}},Td.prototype.unstable_scheduleHydration=function(e){if(e){var t=Te();e={blockedOn:null,target:e,priority:t};for(var n=0;n<yd.length&&0!==t&&t<yd[n].priority;n++);yd.splice(n,0,e),0===n&&wd(e)}};var Ld=l.version;if("19.1.0"!==Ld)throw Error(o(527,Ld,"19.1.0"));F.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=u(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){n=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===n)return c(l),e;if(a===r)return c(l),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=l,r=a;else{for(var i=!1,s=l.child;s;){if(s===n){i=!0,n=l,r=a;break}if(s===r){i=!0,r=l,n=a;break}s=s.sibling}if(!i){for(s=a.child;s;){if(s===n){i=!0,n=a,r=l;break}if(s===r){i=!0,r=a,n=l;break}s=s.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?f(e):null)?null:e.stateNode};var Od={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:D,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Rd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Rd.isDisabled&&Rd.supportsFiber)try{ce=Rd.inject(Od),fe=Rd}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(o(299));var n=!1,r="",l=vi,a=bi,u=ki;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(l=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Xf(e,1,!1,null,0,n,r,l,a,u,0,null),e[De]=t.current,jc(e),new Nd(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(o(299));var r=!1,l="",a=vi,u=bi,s=ki,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Xf(e,1,!0,t,0,r,l,a,u,s,0,c)).context=Jf(null),n=t.current,(l=la(r=ze(r=Ds()))).callback=null,aa(n,l,r),n=r,t.current.lanes=n,xe(t,n),Sc(t),e[De]=t.current,jc(e),new Td(t)},t.version="19.1.0"},221:(e,t,n)=>{"use strict";var r=n(540);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var o={d:{f:a,r:function(){throw Error(l(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(l(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:a}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.1.0"},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var k=b.prototype=new v;k.constructor=b,h(k,y.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S={H:null,A:null,T:null,S:null,V:null},E=Object.prototype.hasOwnProperty;function C(e,t,r,l,a,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function z(){}function N(e,t,l,a,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return N((c=e._init)(e._payload),t,l,a,o)}}if(c)return o=o(e),c=""===a?"."+P(e,0):a,w(o)?(l="",null!=c&&(l=c.replace(_,"$&/")+"/"),N(o,t,l,"",(function(e){return e}))):null!=o&&(x(o)&&(u=o,s=l+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(_,"$&/")+"/")+c,o=C(u.type,s,void 0,0,0,u.props)),t.push(o)),1;c=0;var f,m=""===a?".":a+":";if(w(e))for(var h=0;h<e.length;h++)c+=N(a=e[h],t,l,i=m+P(a,h),o);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=N(a=a.value,t,l,i=m+P(a,h++),o);else if("object"===i){if("function"==typeof e.then)return N(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(z,z):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,l,a,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function T(e,t,n){if(null==e)return e;var r=[],l=0;return N(e,r,"","",(function(e){return t.call(n,e,l++)})),r}function L(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=l,t.Profiler=o,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return S.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),l=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(l=""+t.key),t)!E.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var o=Array(a),i=0;i<a;i++)o[i]=arguments[i+2];r.children=o}return C(e.type,l,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,l={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(l[r]=t[r]);var o=arguments.length-2;if(1===o)l.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];l.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===l[r]&&(l[r]=o[r]);return C(e,a,void 0,0,0,l)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:L}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),l=S.S;null!==l&&l(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,O)}catch(e){O(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=S.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.1.0"},540:(e,t,n)=>{"use strict";e.exports=n(869)},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,l=e[r];if(!(0<a(l,t)))break e;e[r]=t,e[n]=l,n=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,l=e.length,o=l>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>a(u,n))s<l&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<l&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,k="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)l(c);else{if(!(t.startTime<=e))break;l(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(g=!1,w(e),!h)if(null!==r(s))h=!0,C||(C=!0,E());else{var t=r(c);null!==t&&O(S,t.startTime-e)}}var E,C=!1,x=-1,_=5,P=-1;function z(){return!(!y&&t.unstable_now()-P<_)}function N(){if(y=!1,C){var e=t.unstable_now();P=e;var n=!0;try{e:{h=!1,g&&(g=!1,b(x),x=-1),m=!0;var a=p;try{t:{for(w(e),d=r(s);null!==d&&!(d.expirationTime>e&&z());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,w(e),n=!0;break t}d===r(s)&&l(s),w(e)}else l(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&O(S,u.startTime-e),n=!1}}break e}finally{d=null,p=a,m=!1}n=void 0}}finally{n?E():C=!1}}}if("function"==typeof k)E=function(){k(N)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,L=T.port2;T.port1.onmessage=N,E=function(){L.postMessage(null)}}else E=function(){v(N,0)};function O(e,n){x=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):_=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){y=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,l,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(g?(b(x),x=-1):g=!0,O(S,a-o))):(e.sortIndex=i,n(s,e),h||m||(h=!0,C||(C=!0,E()))),e},t.unstable_shouldYield=z,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{"use strict";e.exports=n(477)}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}const r=n(300),l=n(540),{useState:a,useEffect:o}=l,{createRoot:i}=n(338),u=e=>l.createElement("form",{id:"statusForm",onSubmit:t=>((e,t)=>{e.preventDefault(),r.hideError();const n=e.target.querySelector("#statusUpdate").value,l=document.querySelector("#statusMood").value,a=e.target.querySelector("#statusEmoji").value;return n&&l&&a?(r.sendPost(e.target.action,{update:n,mood:l,emoji:a},t),!1):(r.handleError("All fields are required"),!1)})(t,e.triggerReload),name:"statusForm",action:"/maker",method:"POST",className:"statusForm"},l.createElement("label",{htmlFor:"update"},"Status Update: "),l.createElement("input",{id:"statusUpdate",type:"text",name:"update",placeholder:"Whats going on?"}),l.createElement("label",{htmlFor:"mood"},"Mood: "),l.createElement("input",{id:"statusMood",type:"text",name:"mood",placeholder:"Feeling?"}),l.createElement("label",{htmlFor:"emoji"},"Emoji: "),l.createElement("input",{id:"statusEmoji",type:"text",name:"emoji",placeholder:"emoji",maxLength:"2"}),l.createElement("input",{className:"makeStatusSubmit",type:"submit",value:"Post Status"})),s=e=>{const[t,n]=a(e.statuses),[i,u]=a(null);if(o((()=>{(async()=>{const e=await fetch("/getStatuses"),t=await e.json();n(t.statuses)})()}),[e.reloadStatuses]),0===t.length)return l.createElement("div",{className:"statusList"},l.createElement("h3",{className:"emptyStatus"},"No Statuses yet!"));const s=t.map((t=>l.createElement("div",{key:t._id,className:"status"},l.createElement("h3",{className:"statusUser"},t.username),l.createElement("p",{className:"statusEmoji",style:{fontSize:"2rem"}},t.emoji),l.createElement("p",{className:"statusUpdate"},'"',t.update,'"'),l.createElement("p",{className:"statusMood"},"Mood: ",l.createElement("strong",null,t.mood)),l.createElement("button",{onClick:async()=>{await r.sendDelete("/deleteStatus",{id:t._id},(()=>{e.triggerReload()}))},className:"deleteButton"},"Delete"))));return l.createElement("div",{className:"statusList"},s,i&&l.createElement("form",{className:"editForm",onSubmit:async t=>{t.preventDefault();const n=t.target.querySelector("#editUsername").value,l=t.target.querySelector("#editEmoji").value,a=t.target.querySelector("#editUpdate").value,o=t.target.querySelector("#editMood").value;await r.sendPost("/updateStatus",{_id:i._id,username:n,emoji:l,update:a,mood:o},(()=>{e.triggerReload(),u(null)}))}},l.createElement("h3",null,"Editing: ",i.username),l.createElement("label",null,"Username: "),l.createElement("input",{id:"editUsername",name:"username",defaultValue:i.username}),l.createElement("label",null,"Emoji: "),l.createElement("input",{id:"editEmoji",name:"emoji",defaultValue:i.emoji}),l.createElement("label",null,"Status Update: "),l.createElement("input",{id:"editUpdate",name:"update",defaultValue:i.update}),l.createElement("label",null,"Mood: "),l.createElement("input",{id:"editMood",name:"mood",defaultValue:i.mood}),l.createElement("button",{type:"submit"},"Save Changes"),l.createElement("button",{type:"button",onClick:()=>u(null)},"Cancel")))},c=()=>{const[e,t]=a(!1);return l.createElement("div",null,l.createElement("div",{id:"makeStatus"},l.createElement(u,{triggerReload:()=>t(!e)})),l.createElement("div",{id:"statuses"},l.createElement(s,{statuses:[],reloadStatuses:e,triggerReload:()=>t(!e)})),l.createElement("div",{id:"premiumToggle",style:{position:"fixed",bottom:0,width:"100%",textAlign:"center",padding:"10px",backgroundColor:"#eee"}},l.createElement("button",{onClick:async()=>{await fetch("/togglePremium",{method:"POST"}),window.location.reload()}},"Toggle Premium Mode")))};window.onload=()=>{i(document.getElementById("app")).render(l.createElement(c,null))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,